
led_can_rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002090  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800214c  0800214c  0001214c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800219c  0800219c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800219c  0800219c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800219c  0800219c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800219c  0800219c  0001219c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021a0  080021a0  000121a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080021a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  080021b0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  080021b0  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000070d0  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000153d  00000000  00000000  00027104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d0  00000000  00000000  00028648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000718  00000000  00000000  00028e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a504  00000000  00000000  00029530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000817a  00000000  00000000  00043a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000abc31  00000000  00000000  0004bbae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f77df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a88  00000000  00000000  000f7830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002134 	.word	0x08002134

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002134 	.word	0x08002134

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 f9ec 	bl	80005fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f83c 	bl	80002a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f8e0 	bl	80003ec <MX_GPIO_Init>
  MX_FDCAN2_Init();
 800022c:	f000 f896 	bl	800035c <MX_FDCAN2_Init>
  /* USER CODE BEGIN 2 */

  if(HAL_FDCAN_Start(&hfdcan2))
 8000230:	4b17      	ldr	r3, [pc, #92]	; (8000290 <main+0x74>)
 8000232:	0018      	movs	r0, r3
 8000234:	f000 fca6 	bl	8000b84 <HAL_FDCAN_Start>
 8000238:	1e03      	subs	r3, r0, #0
 800023a:	d001      	beq.n	8000240 <main+0x24>
  {
	  Error_Handler();
 800023c:	f000 f90c 	bl	8000458 <Error_Handler>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  if(HAL_FDCAN_GetRxFifoFillLevel(&hfdcan2, FDCAN_RX_FIFO0)>0)
 8000240:	4b13      	ldr	r3, [pc, #76]	; (8000290 <main+0x74>)
 8000242:	2140      	movs	r1, #64	; 0x40
 8000244:	0018      	movs	r0, r3
 8000246:	f000 fdd1 	bl	8000dec <HAL_FDCAN_GetRxFifoFillLevel>
 800024a:	1e03      	subs	r3, r0, #0
 800024c:	d01b      	beq.n	8000286 <main+0x6a>
	  {
		  if(HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 800024e:	4b11      	ldr	r3, [pc, #68]	; (8000294 <main+0x78>)
 8000250:	4a11      	ldr	r2, [pc, #68]	; (8000298 <main+0x7c>)
 8000252:	480f      	ldr	r0, [pc, #60]	; (8000290 <main+0x74>)
 8000254:	2140      	movs	r1, #64	; 0x40
 8000256:	f000 fcbb 	bl	8000bd0 <HAL_FDCAN_GetRxMessage>
 800025a:	1e03      	subs	r3, r0, #0
 800025c:	d113      	bne.n	8000286 <main+0x6a>
		  {
			  /*HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
			  HAL_Delay(200);
			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
		  	  */
			  if(RxData[0] == 1)
 800025e:	4b0d      	ldr	r3, [pc, #52]	; (8000294 <main+0x78>)
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b01      	cmp	r3, #1
 8000264:	d105      	bne.n	8000272 <main+0x56>
			  {
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000266:	4b0d      	ldr	r3, [pc, #52]	; (800029c <main+0x80>)
 8000268:	2201      	movs	r2, #1
 800026a:	2180      	movs	r1, #128	; 0x80
 800026c:	0018      	movs	r0, r3
 800026e:	f000 ffb1 	bl	80011d4 <HAL_GPIO_WritePin>
			  }
			  if(RxData[0] == 0)
 8000272:	4b08      	ldr	r3, [pc, #32]	; (8000294 <main+0x78>)
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d105      	bne.n	8000286 <main+0x6a>
			  {
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800027a:	4b08      	ldr	r3, [pc, #32]	; (800029c <main+0x80>)
 800027c:	2200      	movs	r2, #0
 800027e:	2180      	movs	r1, #128	; 0x80
 8000280:	0018      	movs	r0, r3
 8000282:	f000 ffa7 	bl	80011d4 <HAL_GPIO_WritePin>
			  }
		  }
	  }
	  HAL_Delay(10);
 8000286:	200a      	movs	r0, #10
 8000288:	f000 fa3e 	bl	8000708 <HAL_Delay>
	  if(HAL_FDCAN_GetRxFifoFillLevel(&hfdcan2, FDCAN_RX_FIFO0)>0)
 800028c:	e7d8      	b.n	8000240 <main+0x24>
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	20000028 	.word	0x20000028
 8000294:	200000b4 	.word	0x200000b4
 8000298:	2000008c 	.word	0x2000008c
 800029c:	50000400 	.word	0x50000400

080002a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a0:	b590      	push	{r4, r7, lr}
 80002a2:	b095      	sub	sp, #84	; 0x54
 80002a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a6:	2414      	movs	r4, #20
 80002a8:	193b      	adds	r3, r7, r4
 80002aa:	0018      	movs	r0, r3
 80002ac:	233c      	movs	r3, #60	; 0x3c
 80002ae:	001a      	movs	r2, r3
 80002b0:	2100      	movs	r1, #0
 80002b2:	f001 ff37 	bl	8002124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	0018      	movs	r0, r3
 80002ba:	2310      	movs	r3, #16
 80002bc:	001a      	movs	r2, r3
 80002be:	2100      	movs	r1, #0
 80002c0:	f001 ff30 	bl	8002124 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002c4:	2380      	movs	r3, #128	; 0x80
 80002c6:	009b      	lsls	r3, r3, #2
 80002c8:	0018      	movs	r0, r3
 80002ca:	f000 ffa1 	bl	8001210 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ce:	193b      	adds	r3, r7, r4
 80002d0:	2202      	movs	r2, #2
 80002d2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d4:	193b      	adds	r3, r7, r4
 80002d6:	2280      	movs	r2, #128	; 0x80
 80002d8:	0052      	lsls	r2, r2, #1
 80002da:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002dc:	0021      	movs	r1, r4
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2200      	movs	r2, #0
 80002e2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2240      	movs	r2, #64	; 0x40
 80002e8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2202      	movs	r2, #2
 80002ee:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	2202      	movs	r2, #2
 80002f4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2200      	movs	r2, #0
 80002fa:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 12;
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	220c      	movs	r2, #12
 8000300:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000302:	187b      	adds	r3, r7, r1
 8000304:	2280      	movs	r2, #128	; 0x80
 8000306:	0292      	lsls	r2, r2, #10
 8000308:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2280      	movs	r2, #128	; 0x80
 800030e:	0492      	lsls	r2, r2, #18
 8000310:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000312:	187b      	adds	r3, r7, r1
 8000314:	22c0      	movs	r2, #192	; 0xc0
 8000316:	05d2      	lsls	r2, r2, #23
 8000318:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031a:	187b      	adds	r3, r7, r1
 800031c:	0018      	movs	r0, r3
 800031e:	f000 ffb7 	bl	8001290 <HAL_RCC_OscConfig>
 8000322:	1e03      	subs	r3, r0, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000326:	f000 f897 	bl	8000458 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2207      	movs	r2, #7
 800032e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	2202      	movs	r2, #2
 8000334:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	2200      	movs	r2, #0
 800033a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	2200      	movs	r2, #0
 8000340:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2101      	movs	r1, #1
 8000346:	0018      	movs	r0, r3
 8000348:	f001 fb02 	bl	8001950 <HAL_RCC_ClockConfig>
 800034c:	1e03      	subs	r3, r0, #0
 800034e:	d001      	beq.n	8000354 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000350:	f000 f882 	bl	8000458 <Error_Handler>
  }
}
 8000354:	46c0      	nop			; (mov r8, r8)
 8000356:	46bd      	mov	sp, r7
 8000358:	b015      	add	sp, #84	; 0x54
 800035a:	bd90      	pop	{r4, r7, pc}

0800035c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <MX_FDCAN2_Init+0x88>)
 8000362:	4a21      	ldr	r2, [pc, #132]	; (80003e8 <MX_FDCAN2_Init+0x8c>)
 8000364:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <MX_FDCAN2_Init+0x88>)
 8000368:	2200      	movs	r2, #0
 800036a:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <MX_FDCAN2_Init+0x88>)
 800036e:	2200      	movs	r2, #0
 8000370:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <MX_FDCAN2_Init+0x88>)
 8000374:	2200      	movs	r2, #0
 8000376:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <MX_FDCAN2_Init+0x88>)
 800037a:	2200      	movs	r2, #0
 800037c:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <MX_FDCAN2_Init+0x88>)
 8000380:	2200      	movs	r2, #0
 8000382:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <MX_FDCAN2_Init+0x88>)
 8000386:	2200      	movs	r2, #0
 8000388:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 6;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <MX_FDCAN2_Init+0x88>)
 800038c:	2206      	movs	r2, #6
 800038e:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <MX_FDCAN2_Init+0x88>)
 8000392:	2201      	movs	r2, #1
 8000394:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 13;
 8000396:	4b13      	ldr	r3, [pc, #76]	; (80003e4 <MX_FDCAN2_Init+0x88>)
 8000398:	220d      	movs	r2, #13
 800039a:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <MX_FDCAN2_Init+0x88>)
 800039e:	2202      	movs	r2, #2
 80003a0:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 6;
 80003a2:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <MX_FDCAN2_Init+0x88>)
 80003a4:	2206      	movs	r2, #6
 80003a6:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80003a8:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <MX_FDCAN2_Init+0x88>)
 80003aa:	2201      	movs	r2, #1
 80003ac:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 13;
 80003ae:	4b0d      	ldr	r3, [pc, #52]	; (80003e4 <MX_FDCAN2_Init+0x88>)
 80003b0:	220d      	movs	r2, #13
 80003b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 2;
 80003b4:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <MX_FDCAN2_Init+0x88>)
 80003b6:	2202      	movs	r2, #2
 80003b8:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 28;
 80003ba:	4b0a      	ldr	r3, [pc, #40]	; (80003e4 <MX_FDCAN2_Init+0x88>)
 80003bc:	221c      	movs	r2, #28
 80003be:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 8;
 80003c0:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <MX_FDCAN2_Init+0x88>)
 80003c2:	2208      	movs	r2, #8
 80003c4:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80003c6:	4b07      	ldr	r3, [pc, #28]	; (80003e4 <MX_FDCAN2_Init+0x88>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80003cc:	4b05      	ldr	r3, [pc, #20]	; (80003e4 <MX_FDCAN2_Init+0x88>)
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 fa72 	bl	80008b8 <HAL_FDCAN_Init>
 80003d4:	1e03      	subs	r3, r0, #0
 80003d6:	d001      	beq.n	80003dc <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 80003d8:	f000 f83e 	bl	8000458 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80003dc:	46c0      	nop			; (mov r8, r8)
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	20000028 	.word	0x20000028
 80003e8:	40006800 	.word	0x40006800

080003ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b086      	sub	sp, #24
 80003f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	0018      	movs	r0, r3
 80003f6:	2314      	movs	r3, #20
 80003f8:	001a      	movs	r2, r3
 80003fa:	2100      	movs	r1, #0
 80003fc:	f001 fe92 	bl	8002124 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000400:	4b13      	ldr	r3, [pc, #76]	; (8000450 <MX_GPIO_Init+0x64>)
 8000402:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000404:	4b12      	ldr	r3, [pc, #72]	; (8000450 <MX_GPIO_Init+0x64>)
 8000406:	2102      	movs	r1, #2
 8000408:	430a      	orrs	r2, r1
 800040a:	635a      	str	r2, [r3, #52]	; 0x34
 800040c:	4b10      	ldr	r3, [pc, #64]	; (8000450 <MX_GPIO_Init+0x64>)
 800040e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000410:	2202      	movs	r2, #2
 8000412:	4013      	ands	r3, r2
 8000414:	603b      	str	r3, [r7, #0]
 8000416:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000418:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <MX_GPIO_Init+0x68>)
 800041a:	2200      	movs	r2, #0
 800041c:	2180      	movs	r1, #128	; 0x80
 800041e:	0018      	movs	r0, r3
 8000420:	f000 fed8 	bl	80011d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	2280      	movs	r2, #128	; 0x80
 8000428:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	2201      	movs	r2, #1
 800042e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	2200      	movs	r2, #0
 8000434:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	2200      	movs	r2, #0
 800043a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	4a05      	ldr	r2, [pc, #20]	; (8000454 <MX_GPIO_Init+0x68>)
 8000440:	0019      	movs	r1, r3
 8000442:	0010      	movs	r0, r2
 8000444:	f000 fd5a 	bl	8000efc <HAL_GPIO_Init>

}
 8000448:	46c0      	nop			; (mov r8, r8)
 800044a:	46bd      	mov	sp, r7
 800044c:	b006      	add	sp, #24
 800044e:	bd80      	pop	{r7, pc}
 8000450:	40021000 	.word	0x40021000
 8000454:	50000400 	.word	0x50000400

08000458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800045c:	b672      	cpsid	i
}
 800045e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000460:	e7fe      	b.n	8000460 <Error_Handler+0x8>
	...

08000464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800046a:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <HAL_MspInit+0x44>)
 800046c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800046e:	4b0e      	ldr	r3, [pc, #56]	; (80004a8 <HAL_MspInit+0x44>)
 8000470:	2101      	movs	r1, #1
 8000472:	430a      	orrs	r2, r1
 8000474:	641a      	str	r2, [r3, #64]	; 0x40
 8000476:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <HAL_MspInit+0x44>)
 8000478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800047a:	2201      	movs	r2, #1
 800047c:	4013      	ands	r3, r2
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000482:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <HAL_MspInit+0x44>)
 8000484:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000486:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <HAL_MspInit+0x44>)
 8000488:	2180      	movs	r1, #128	; 0x80
 800048a:	0549      	lsls	r1, r1, #21
 800048c:	430a      	orrs	r2, r1
 800048e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000490:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <HAL_MspInit+0x44>)
 8000492:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	055b      	lsls	r3, r3, #21
 8000498:	4013      	ands	r3, r2
 800049a:	603b      	str	r3, [r7, #0]
 800049c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	46bd      	mov	sp, r7
 80004a2:	b002      	add	sp, #8
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	40021000 	.word	0x40021000

080004ac <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80004ac:	b590      	push	{r4, r7, lr}
 80004ae:	b09d      	sub	sp, #116	; 0x74
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b4:	235c      	movs	r3, #92	; 0x5c
 80004b6:	18fb      	adds	r3, r7, r3
 80004b8:	0018      	movs	r0, r3
 80004ba:	2314      	movs	r3, #20
 80004bc:	001a      	movs	r2, r3
 80004be:	2100      	movs	r1, #0
 80004c0:	f001 fe30 	bl	8002124 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004c4:	2410      	movs	r4, #16
 80004c6:	193b      	adds	r3, r7, r4
 80004c8:	0018      	movs	r0, r3
 80004ca:	234c      	movs	r3, #76	; 0x4c
 80004cc:	001a      	movs	r2, r3
 80004ce:	2100      	movs	r1, #0
 80004d0:	f001 fe28 	bl	8002124 <memset>
  if(hfdcan->Instance==FDCAN2)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a22      	ldr	r2, [pc, #136]	; (8000564 <HAL_FDCAN_MspInit+0xb8>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d13e      	bne.n	800055c <HAL_FDCAN_MspInit+0xb0>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80004de:	193b      	adds	r3, r7, r4
 80004e0:	2280      	movs	r2, #128	; 0x80
 80004e2:	0492      	lsls	r2, r2, #18
 80004e4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80004e6:	193b      	adds	r3, r7, r4
 80004e8:	2200      	movs	r2, #0
 80004ea:	649a      	str	r2, [r3, #72]	; 0x48

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ec:	193b      	adds	r3, r7, r4
 80004ee:	0018      	movs	r0, r3
 80004f0:	f001 fbb8 	bl	8001c64 <HAL_RCCEx_PeriphCLKConfig>
 80004f4:	1e03      	subs	r3, r0, #0
 80004f6:	d001      	beq.n	80004fc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80004f8:	f7ff ffae 	bl	8000458 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80004fc:	4b1a      	ldr	r3, [pc, #104]	; (8000568 <HAL_FDCAN_MspInit+0xbc>)
 80004fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000500:	4b19      	ldr	r3, [pc, #100]	; (8000568 <HAL_FDCAN_MspInit+0xbc>)
 8000502:	2180      	movs	r1, #128	; 0x80
 8000504:	0149      	lsls	r1, r1, #5
 8000506:	430a      	orrs	r2, r1
 8000508:	63da      	str	r2, [r3, #60]	; 0x3c
 800050a:	4b17      	ldr	r3, [pc, #92]	; (8000568 <HAL_FDCAN_MspInit+0xbc>)
 800050c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800050e:	2380      	movs	r3, #128	; 0x80
 8000510:	015b      	lsls	r3, r3, #5
 8000512:	4013      	ands	r3, r2
 8000514:	60fb      	str	r3, [r7, #12]
 8000516:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000518:	4b13      	ldr	r3, [pc, #76]	; (8000568 <HAL_FDCAN_MspInit+0xbc>)
 800051a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800051c:	4b12      	ldr	r3, [pc, #72]	; (8000568 <HAL_FDCAN_MspInit+0xbc>)
 800051e:	2102      	movs	r1, #2
 8000520:	430a      	orrs	r2, r1
 8000522:	635a      	str	r2, [r3, #52]	; 0x34
 8000524:	4b10      	ldr	r3, [pc, #64]	; (8000568 <HAL_FDCAN_MspInit+0xbc>)
 8000526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000528:	2202      	movs	r2, #2
 800052a:	4013      	ands	r3, r2
 800052c:	60bb      	str	r3, [r7, #8]
 800052e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB0     ------> FDCAN2_RX
    PB1     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000530:	215c      	movs	r1, #92	; 0x5c
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2203      	movs	r2, #3
 8000536:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000538:	187b      	adds	r3, r7, r1
 800053a:	2202      	movs	r2, #2
 800053c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	187b      	adds	r3, r7, r1
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN2;
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2203      	movs	r2, #3
 800054e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000550:	187b      	adds	r3, r7, r1
 8000552:	4a06      	ldr	r2, [pc, #24]	; (800056c <HAL_FDCAN_MspInit+0xc0>)
 8000554:	0019      	movs	r1, r3
 8000556:	0010      	movs	r0, r2
 8000558:	f000 fcd0 	bl	8000efc <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	b01d      	add	sp, #116	; 0x74
 8000562:	bd90      	pop	{r4, r7, pc}
 8000564:	40006800 	.word	0x40006800
 8000568:	40021000 	.word	0x40021000
 800056c:	50000400 	.word	0x50000400

08000570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000574:	e7fe      	b.n	8000574 <NMI_Handler+0x4>

08000576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000576:	b580      	push	{r7, lr}
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800057a:	e7fe      	b.n	800057a <HardFault_Handler+0x4>

0800057c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000580:	46c0      	nop			; (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}

08000586 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000586:	b580      	push	{r7, lr}
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000594:	f000 f89c 	bl	80006d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000598:	46c0      	nop			; (mov r8, r8)
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}

0800059e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005a8:	480d      	ldr	r0, [pc, #52]	; (80005e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005aa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80005ac:	f7ff fff7 	bl	800059e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b0:	480c      	ldr	r0, [pc, #48]	; (80005e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80005b2:	490d      	ldr	r1, [pc, #52]	; (80005e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005b4:	4a0d      	ldr	r2, [pc, #52]	; (80005ec <LoopForever+0xe>)
  movs r3, #0
 80005b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b8:	e002      	b.n	80005c0 <LoopCopyDataInit>

080005ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005be:	3304      	adds	r3, #4

080005c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c4:	d3f9      	bcc.n	80005ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005c6:	4a0a      	ldr	r2, [pc, #40]	; (80005f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005c8:	4c0a      	ldr	r4, [pc, #40]	; (80005f4 <LoopForever+0x16>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005cc:	e001      	b.n	80005d2 <LoopFillZerobss>

080005ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d0:	3204      	adds	r2, #4

080005d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d4:	d3fb      	bcc.n	80005ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005d6:	f001 fd81 	bl	80020dc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80005da:	f7ff fe1f 	bl	800021c <main>

080005de <LoopForever>:

LoopForever:
  b LoopForever
 80005de:	e7fe      	b.n	80005de <LoopForever>
  ldr   r0, =_estack
 80005e0:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80005e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005ec:	080021a4 	.word	0x080021a4
  ldr r2, =_sbss
 80005f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005f4:	200000c0 	.word	0x200000c0

080005f8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005f8:	e7fe      	b.n	80005f8 <ADC1_COMP_IRQHandler>
	...

080005fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000602:	1dfb      	adds	r3, r7, #7
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000608:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <HAL_Init+0x3c>)
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <HAL_Init+0x3c>)
 800060e:	2180      	movs	r1, #128	; 0x80
 8000610:	0049      	lsls	r1, r1, #1
 8000612:	430a      	orrs	r2, r1
 8000614:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000616:	2003      	movs	r0, #3
 8000618:	f000 f810 	bl	800063c <HAL_InitTick>
 800061c:	1e03      	subs	r3, r0, #0
 800061e:	d003      	beq.n	8000628 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000620:	1dfb      	adds	r3, r7, #7
 8000622:	2201      	movs	r2, #1
 8000624:	701a      	strb	r2, [r3, #0]
 8000626:	e001      	b.n	800062c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000628:	f7ff ff1c 	bl	8000464 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800062c:	1dfb      	adds	r3, r7, #7
 800062e:	781b      	ldrb	r3, [r3, #0]
}
 8000630:	0018      	movs	r0, r3
 8000632:	46bd      	mov	sp, r7
 8000634:	b002      	add	sp, #8
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40022000 	.word	0x40022000

0800063c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000644:	230f      	movs	r3, #15
 8000646:	18fb      	adds	r3, r7, r3
 8000648:	2200      	movs	r2, #0
 800064a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800064c:	4b1d      	ldr	r3, [pc, #116]	; (80006c4 <HAL_InitTick+0x88>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d02b      	beq.n	80006ac <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000654:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <HAL_InitTick+0x8c>)
 8000656:	681c      	ldr	r4, [r3, #0]
 8000658:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <HAL_InitTick+0x88>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	0019      	movs	r1, r3
 800065e:	23fa      	movs	r3, #250	; 0xfa
 8000660:	0098      	lsls	r0, r3, #2
 8000662:	f7ff fd4f 	bl	8000104 <__udivsi3>
 8000666:	0003      	movs	r3, r0
 8000668:	0019      	movs	r1, r3
 800066a:	0020      	movs	r0, r4
 800066c:	f7ff fd4a 	bl	8000104 <__udivsi3>
 8000670:	0003      	movs	r3, r0
 8000672:	0018      	movs	r0, r3
 8000674:	f000 f913 	bl	800089e <HAL_SYSTICK_Config>
 8000678:	1e03      	subs	r3, r0, #0
 800067a:	d112      	bne.n	80006a2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2b03      	cmp	r3, #3
 8000680:	d80a      	bhi.n	8000698 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000682:	6879      	ldr	r1, [r7, #4]
 8000684:	2301      	movs	r3, #1
 8000686:	425b      	negs	r3, r3
 8000688:	2200      	movs	r2, #0
 800068a:	0018      	movs	r0, r3
 800068c:	f000 f8f2 	bl	8000874 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000690:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <HAL_InitTick+0x90>)
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	e00d      	b.n	80006b4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000698:	230f      	movs	r3, #15
 800069a:	18fb      	adds	r3, r7, r3
 800069c:	2201      	movs	r2, #1
 800069e:	701a      	strb	r2, [r3, #0]
 80006a0:	e008      	b.n	80006b4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006a2:	230f      	movs	r3, #15
 80006a4:	18fb      	adds	r3, r7, r3
 80006a6:	2201      	movs	r2, #1
 80006a8:	701a      	strb	r2, [r3, #0]
 80006aa:	e003      	b.n	80006b4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006ac:	230f      	movs	r3, #15
 80006ae:	18fb      	adds	r3, r7, r3
 80006b0:	2201      	movs	r2, #1
 80006b2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80006b4:	230f      	movs	r3, #15
 80006b6:	18fb      	adds	r3, r7, r3
 80006b8:	781b      	ldrb	r3, [r3, #0]
}
 80006ba:	0018      	movs	r0, r3
 80006bc:	46bd      	mov	sp, r7
 80006be:	b005      	add	sp, #20
 80006c0:	bd90      	pop	{r4, r7, pc}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	20000008 	.word	0x20000008
 80006c8:	20000000 	.word	0x20000000
 80006cc:	20000004 	.word	0x20000004

080006d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006d4:	4b05      	ldr	r3, [pc, #20]	; (80006ec <HAL_IncTick+0x1c>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	001a      	movs	r2, r3
 80006da:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <HAL_IncTick+0x20>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	18d2      	adds	r2, r2, r3
 80006e0:	4b03      	ldr	r3, [pc, #12]	; (80006f0 <HAL_IncTick+0x20>)
 80006e2:	601a      	str	r2, [r3, #0]
}
 80006e4:	46c0      	nop			; (mov r8, r8)
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	20000008 	.word	0x20000008
 80006f0:	200000bc 	.word	0x200000bc

080006f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  return uwTick;
 80006f8:	4b02      	ldr	r3, [pc, #8]	; (8000704 <HAL_GetTick+0x10>)
 80006fa:	681b      	ldr	r3, [r3, #0]
}
 80006fc:	0018      	movs	r0, r3
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	200000bc 	.word	0x200000bc

08000708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000710:	f7ff fff0 	bl	80006f4 <HAL_GetTick>
 8000714:	0003      	movs	r3, r0
 8000716:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	3301      	adds	r3, #1
 8000720:	d005      	beq.n	800072e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000722:	4b0a      	ldr	r3, [pc, #40]	; (800074c <HAL_Delay+0x44>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	001a      	movs	r2, r3
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	189b      	adds	r3, r3, r2
 800072c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	f7ff ffe0 	bl	80006f4 <HAL_GetTick>
 8000734:	0002      	movs	r2, r0
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	1ad3      	subs	r3, r2, r3
 800073a:	68fa      	ldr	r2, [r7, #12]
 800073c:	429a      	cmp	r2, r3
 800073e:	d8f7      	bhi.n	8000730 <HAL_Delay+0x28>
  {
  }
}
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	b004      	add	sp, #16
 8000748:	bd80      	pop	{r7, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	20000008 	.word	0x20000008

08000750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000750:	b590      	push	{r4, r7, lr}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	0002      	movs	r2, r0
 8000758:	6039      	str	r1, [r7, #0]
 800075a:	1dfb      	adds	r3, r7, #7
 800075c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800075e:	1dfb      	adds	r3, r7, #7
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b7f      	cmp	r3, #127	; 0x7f
 8000764:	d828      	bhi.n	80007b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000766:	4a2f      	ldr	r2, [pc, #188]	; (8000824 <__NVIC_SetPriority+0xd4>)
 8000768:	1dfb      	adds	r3, r7, #7
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	b25b      	sxtb	r3, r3
 800076e:	089b      	lsrs	r3, r3, #2
 8000770:	33c0      	adds	r3, #192	; 0xc0
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	589b      	ldr	r3, [r3, r2]
 8000776:	1dfa      	adds	r2, r7, #7
 8000778:	7812      	ldrb	r2, [r2, #0]
 800077a:	0011      	movs	r1, r2
 800077c:	2203      	movs	r2, #3
 800077e:	400a      	ands	r2, r1
 8000780:	00d2      	lsls	r2, r2, #3
 8000782:	21ff      	movs	r1, #255	; 0xff
 8000784:	4091      	lsls	r1, r2
 8000786:	000a      	movs	r2, r1
 8000788:	43d2      	mvns	r2, r2
 800078a:	401a      	ands	r2, r3
 800078c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	019b      	lsls	r3, r3, #6
 8000792:	22ff      	movs	r2, #255	; 0xff
 8000794:	401a      	ands	r2, r3
 8000796:	1dfb      	adds	r3, r7, #7
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	0018      	movs	r0, r3
 800079c:	2303      	movs	r3, #3
 800079e:	4003      	ands	r3, r0
 80007a0:	00db      	lsls	r3, r3, #3
 80007a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007a4:	481f      	ldr	r0, [pc, #124]	; (8000824 <__NVIC_SetPriority+0xd4>)
 80007a6:	1dfb      	adds	r3, r7, #7
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	b25b      	sxtb	r3, r3
 80007ac:	089b      	lsrs	r3, r3, #2
 80007ae:	430a      	orrs	r2, r1
 80007b0:	33c0      	adds	r3, #192	; 0xc0
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007b6:	e031      	b.n	800081c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007b8:	4a1b      	ldr	r2, [pc, #108]	; (8000828 <__NVIC_SetPriority+0xd8>)
 80007ba:	1dfb      	adds	r3, r7, #7
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	0019      	movs	r1, r3
 80007c0:	230f      	movs	r3, #15
 80007c2:	400b      	ands	r3, r1
 80007c4:	3b08      	subs	r3, #8
 80007c6:	089b      	lsrs	r3, r3, #2
 80007c8:	3306      	adds	r3, #6
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	18d3      	adds	r3, r2, r3
 80007ce:	3304      	adds	r3, #4
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	1dfa      	adds	r2, r7, #7
 80007d4:	7812      	ldrb	r2, [r2, #0]
 80007d6:	0011      	movs	r1, r2
 80007d8:	2203      	movs	r2, #3
 80007da:	400a      	ands	r2, r1
 80007dc:	00d2      	lsls	r2, r2, #3
 80007de:	21ff      	movs	r1, #255	; 0xff
 80007e0:	4091      	lsls	r1, r2
 80007e2:	000a      	movs	r2, r1
 80007e4:	43d2      	mvns	r2, r2
 80007e6:	401a      	ands	r2, r3
 80007e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	019b      	lsls	r3, r3, #6
 80007ee:	22ff      	movs	r2, #255	; 0xff
 80007f0:	401a      	ands	r2, r3
 80007f2:	1dfb      	adds	r3, r7, #7
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	0018      	movs	r0, r3
 80007f8:	2303      	movs	r3, #3
 80007fa:	4003      	ands	r3, r0
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000800:	4809      	ldr	r0, [pc, #36]	; (8000828 <__NVIC_SetPriority+0xd8>)
 8000802:	1dfb      	adds	r3, r7, #7
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	001c      	movs	r4, r3
 8000808:	230f      	movs	r3, #15
 800080a:	4023      	ands	r3, r4
 800080c:	3b08      	subs	r3, #8
 800080e:	089b      	lsrs	r3, r3, #2
 8000810:	430a      	orrs	r2, r1
 8000812:	3306      	adds	r3, #6
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	18c3      	adds	r3, r0, r3
 8000818:	3304      	adds	r3, #4
 800081a:	601a      	str	r2, [r3, #0]
}
 800081c:	46c0      	nop			; (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	b003      	add	sp, #12
 8000822:	bd90      	pop	{r4, r7, pc}
 8000824:	e000e100 	.word	0xe000e100
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	1e5a      	subs	r2, r3, #1
 8000838:	2380      	movs	r3, #128	; 0x80
 800083a:	045b      	lsls	r3, r3, #17
 800083c:	429a      	cmp	r2, r3
 800083e:	d301      	bcc.n	8000844 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000840:	2301      	movs	r3, #1
 8000842:	e010      	b.n	8000866 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000844:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <SysTick_Config+0x44>)
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	3a01      	subs	r2, #1
 800084a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800084c:	2301      	movs	r3, #1
 800084e:	425b      	negs	r3, r3
 8000850:	2103      	movs	r1, #3
 8000852:	0018      	movs	r0, r3
 8000854:	f7ff ff7c 	bl	8000750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <SysTick_Config+0x44>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800085e:	4b04      	ldr	r3, [pc, #16]	; (8000870 <SysTick_Config+0x44>)
 8000860:	2207      	movs	r2, #7
 8000862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000864:	2300      	movs	r3, #0
}
 8000866:	0018      	movs	r0, r3
 8000868:	46bd      	mov	sp, r7
 800086a:	b002      	add	sp, #8
 800086c:	bd80      	pop	{r7, pc}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	e000e010 	.word	0xe000e010

08000874 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	60b9      	str	r1, [r7, #8]
 800087c:	607a      	str	r2, [r7, #4]
 800087e:	210f      	movs	r1, #15
 8000880:	187b      	adds	r3, r7, r1
 8000882:	1c02      	adds	r2, r0, #0
 8000884:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000886:	68ba      	ldr	r2, [r7, #8]
 8000888:	187b      	adds	r3, r7, r1
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	b25b      	sxtb	r3, r3
 800088e:	0011      	movs	r1, r2
 8000890:	0018      	movs	r0, r3
 8000892:	f7ff ff5d 	bl	8000750 <__NVIC_SetPriority>
}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	b004      	add	sp, #16
 800089c:	bd80      	pop	{r7, pc}

0800089e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	0018      	movs	r0, r3
 80008aa:	f7ff ffbf 	bl	800082c <SysTick_Config>
 80008ae:	0003      	movs	r3, r0
}
 80008b0:	0018      	movs	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	b002      	add	sp, #8
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d101      	bne.n	80008ca <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
 80008c8:	e14e      	b.n	8000b68 <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	225c      	movs	r2, #92	; 0x5c
 80008ce:	5c9b      	ldrb	r3, [r3, r2]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d107      	bne.n	80008e6 <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	225d      	movs	r2, #93	; 0x5d
 80008da:	2100      	movs	r1, #0
 80008dc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	0018      	movs	r0, r3
 80008e2:	f7ff fde3 	bl	80004ac <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	699a      	ldr	r2, [r3, #24]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2110      	movs	r1, #16
 80008f2:	438a      	bics	r2, r1
 80008f4:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008f6:	f7ff fefd 	bl	80006f4 <HAL_GetTick>
 80008fa:	0003      	movs	r3, r0
 80008fc:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80008fe:	e012      	b.n	8000926 <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000900:	f7ff fef8 	bl	80006f4 <HAL_GetTick>
 8000904:	0002      	movs	r2, r0
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	2b0a      	cmp	r3, #10
 800090c:	d90b      	bls.n	8000926 <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000912:	2201      	movs	r2, #1
 8000914:	431a      	orrs	r2, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	225c      	movs	r2, #92	; 0x5c
 800091e:	2103      	movs	r1, #3
 8000920:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	e120      	b.n	8000b68 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	2208      	movs	r2, #8
 800092e:	4013      	ands	r3, r2
 8000930:	2b08      	cmp	r3, #8
 8000932:	d0e5      	beq.n	8000900 <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	699a      	ldr	r2, [r3, #24]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2101      	movs	r1, #1
 8000940:	430a      	orrs	r2, r1
 8000942:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000944:	f7ff fed6 	bl	80006f4 <HAL_GetTick>
 8000948:	0003      	movs	r3, r0
 800094a:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800094c:	e012      	b.n	8000974 <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800094e:	f7ff fed1 	bl	80006f4 <HAL_GetTick>
 8000952:	0002      	movs	r2, r0
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	1ad3      	subs	r3, r2, r3
 8000958:	2b0a      	cmp	r3, #10
 800095a:	d90b      	bls.n	8000974 <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000960:	2201      	movs	r2, #1
 8000962:	431a      	orrs	r2, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	225c      	movs	r2, #92	; 0x5c
 800096c:	2103      	movs	r1, #3
 800096e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000970:	2301      	movs	r3, #1
 8000972:	e0f9      	b.n	8000b68 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	2201      	movs	r2, #1
 800097c:	4013      	ands	r3, r2
 800097e:	d0e6      	beq.n	800094e <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	699a      	ldr	r2, [r3, #24]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2102      	movs	r1, #2
 800098c:	430a      	orrs	r2, r1
 800098e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a76      	ldr	r2, [pc, #472]	; (8000b70 <HAL_FDCAN_Init+0x2b8>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d103      	bne.n	80009a2 <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800099a:	4a76      	ldr	r2, [pc, #472]	; (8000b74 <HAL_FDCAN_Init+0x2bc>)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	7c1b      	ldrb	r3, [r3, #16]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d108      	bne.n	80009bc <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	699a      	ldr	r2, [r3, #24]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2140      	movs	r1, #64	; 0x40
 80009b6:	438a      	bics	r2, r1
 80009b8:	619a      	str	r2, [r3, #24]
 80009ba:	e007      	b.n	80009cc <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	699a      	ldr	r2, [r3, #24]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2140      	movs	r1, #64	; 0x40
 80009c8:	430a      	orrs	r2, r1
 80009ca:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	7c5b      	ldrb	r3, [r3, #17]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d109      	bne.n	80009e8 <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	699a      	ldr	r2, [r3, #24]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2180      	movs	r1, #128	; 0x80
 80009e0:	01c9      	lsls	r1, r1, #7
 80009e2:	430a      	orrs	r2, r1
 80009e4:	619a      	str	r2, [r3, #24]
 80009e6:	e007      	b.n	80009f8 <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	699a      	ldr	r2, [r3, #24]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4961      	ldr	r1, [pc, #388]	; (8000b78 <HAL_FDCAN_Init+0x2c0>)
 80009f4:	400a      	ands	r2, r1
 80009f6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	7c9b      	ldrb	r3, [r3, #18]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d108      	bne.n	8000a12 <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	699a      	ldr	r2, [r3, #24]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	495c      	ldr	r1, [pc, #368]	; (8000b7c <HAL_FDCAN_Init+0x2c4>)
 8000a0c:	400a      	ands	r2, r1
 8000a0e:	619a      	str	r2, [r3, #24]
 8000a10:	e008      	b.n	8000a24 <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	699a      	ldr	r2, [r3, #24]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2180      	movs	r1, #128	; 0x80
 8000a1e:	0149      	lsls	r1, r1, #5
 8000a20:	430a      	orrs	r2, r1
 8000a22:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	4a55      	ldr	r2, [pc, #340]	; (8000b80 <HAL_FDCAN_Init+0x2c8>)
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	0019      	movs	r1, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	689a      	ldr	r2, [r3, #8]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	699a      	ldr	r2, [r3, #24]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	21a4      	movs	r1, #164	; 0xa4
 8000a48:	438a      	bics	r2, r1
 8000a4a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	691a      	ldr	r2, [r3, #16]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	2110      	movs	r1, #16
 8000a58:	438a      	bics	r2, r1
 8000a5a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d108      	bne.n	8000a76 <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	699a      	ldr	r2, [r3, #24]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2104      	movs	r1, #4
 8000a70:	430a      	orrs	r2, r1
 8000a72:	619a      	str	r2, [r3, #24]
 8000a74:	e02c      	b.n	8000ad0 <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	68db      	ldr	r3, [r3, #12]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d028      	beq.n	8000ad0 <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	68db      	ldr	r3, [r3, #12]
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	d01c      	beq.n	8000ac0 <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	699a      	ldr	r2, [r3, #24]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2180      	movs	r1, #128	; 0x80
 8000a92:	430a      	orrs	r2, r1
 8000a94:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	691a      	ldr	r2, [r3, #16]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2110      	movs	r1, #16
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	68db      	ldr	r3, [r3, #12]
 8000aaa:	2b03      	cmp	r3, #3
 8000aac:	d110      	bne.n	8000ad0 <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	699a      	ldr	r2, [r3, #24]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2120      	movs	r1, #32
 8000aba:	430a      	orrs	r2, r1
 8000abc:	619a      	str	r2, [r3, #24]
 8000abe:	e007      	b.n	8000ad0 <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	699a      	ldr	r2, [r3, #24]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2120      	movs	r1, #32
 8000acc:	430a      	orrs	r2, r1
 8000ace:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	69db      	ldr	r3, [r3, #28]
 8000adc:	3b01      	subs	r3, #1
 8000ade:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000ae0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6a1b      	ldr	r3, [r3, #32]
 8000ae6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	695b      	ldr	r3, [r3, #20]
 8000af0:	3b01      	subs	r3, #1
 8000af2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000af8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000afa:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	689a      	ldr	r2, [r3, #8]
 8000b00:	23c0      	movs	r3, #192	; 0xc0
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d115      	bne.n	8000b34 <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b0c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b12:	3b01      	subs	r3, #1
 8000b14:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000b16:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1c:	3b01      	subs	r3, #1
 8000b1e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000b20:	431a      	orrs	r2, r3
 8000b22:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000b30:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000b32:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	22c0      	movs	r2, #192	; 0xc0
 8000b3a:	5899      	ldr	r1, [r3, r2]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	430a      	orrs	r2, r1
 8000b46:	21c0      	movs	r1, #192	; 0xc0
 8000b48:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f000 f969 	bl	8000e24 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2200      	movs	r2, #0
 8000b56:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	225c      	movs	r2, #92	; 0x5c
 8000b62:	2101      	movs	r1, #1
 8000b64:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000b66:	2300      	movs	r3, #0
}
 8000b68:	0018      	movs	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b004      	add	sp, #16
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40006400 	.word	0x40006400
 8000b74:	40006500 	.word	0x40006500
 8000b78:	ffffbfff 	.word	0xffffbfff
 8000b7c:	ffffefff 	.word	0xffffefff
 8000b80:	fffffcff 	.word	0xfffffcff

08000b84 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	225c      	movs	r2, #92	; 0x5c
 8000b90:	5c9b      	ldrb	r3, [r3, r2]
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d110      	bne.n	8000bba <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	225c      	movs	r2, #92	; 0x5c
 8000b9c:	2102      	movs	r1, #2
 8000b9e:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	699a      	ldr	r2, [r3, #24]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2101      	movs	r1, #1
 8000bac:	438a      	bics	r2, r1
 8000bae:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e006      	b.n	8000bc8 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bbe:	2204      	movs	r2, #4
 8000bc0:	431a      	orrs	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
  }
}
 8000bc8:	0018      	movs	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	b002      	add	sp, #8
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
 8000bdc:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000be2:	201b      	movs	r0, #27
 8000be4:	183b      	adds	r3, r7, r0
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	215c      	movs	r1, #92	; 0x5c
 8000bea:	5c52      	ldrb	r2, [r2, r1]
 8000bec:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8000bee:	183b      	adds	r3, r7, r0
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	d000      	beq.n	8000bf8 <HAL_FDCAN_GetRxMessage+0x28>
 8000bf6:	e0ec      	b.n	8000dd2 <HAL_FDCAN_GetRxMessage+0x202>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	2b40      	cmp	r3, #64	; 0x40
 8000bfc:	d137      	bne.n	8000c6e <HAL_FDCAN_GetRxMessage+0x9e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2290      	movs	r2, #144	; 0x90
 8000c04:	589b      	ldr	r3, [r3, r2]
 8000c06:	220f      	movs	r2, #15
 8000c08:	4013      	ands	r3, r2
 8000c0a:	d108      	bne.n	8000c1e <HAL_FDCAN_GetRxMessage+0x4e>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c10:	2280      	movs	r2, #128	; 0x80
 8000c12:	0052      	lsls	r2, r2, #1
 8000c14:	431a      	orrs	r2, r3
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e0e0      	b.n	8000de0 <HAL_FDCAN_GetRxMessage+0x210>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2290      	movs	r2, #144	; 0x90
 8000c24:	589b      	ldr	r3, [r3, r2]
 8000c26:	0e1b      	lsrs	r3, r3, #24
 8000c28:	2201      	movs	r2, #1
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d10a      	bne.n	8000c46 <HAL_FDCAN_GetRxMessage+0x76>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2280      	movs	r2, #128	; 0x80
 8000c36:	589b      	ldr	r3, [r3, r2]
 8000c38:	0a5b      	lsrs	r3, r3, #9
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d101      	bne.n	8000c46 <HAL_FDCAN_GetRxMessage+0x76>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8000c42:	2301      	movs	r3, #1
 8000c44:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2290      	movs	r2, #144	; 0x90
 8000c4c:	589b      	ldr	r3, [r3, r2]
 8000c4e:	0a1b      	lsrs	r3, r3, #8
 8000c50:	2203      	movs	r2, #3
 8000c52:	4013      	ands	r3, r2
 8000c54:	69fa      	ldr	r2, [r7, #28]
 8000c56:	18d3      	adds	r3, r2, r3
 8000c58:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8000c5e:	69fa      	ldr	r2, [r7, #28]
 8000c60:	0013      	movs	r3, r2
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	189b      	adds	r3, r3, r2
 8000c66:	00db      	lsls	r3, r3, #3
 8000c68:	18cb      	adds	r3, r1, r3
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8000c6c:	e036      	b.n	8000cdc <HAL_FDCAN_GetRxMessage+0x10c>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2298      	movs	r2, #152	; 0x98
 8000c74:	589b      	ldr	r3, [r3, r2]
 8000c76:	220f      	movs	r2, #15
 8000c78:	4013      	ands	r3, r2
 8000c7a:	d108      	bne.n	8000c8e <HAL_FDCAN_GetRxMessage+0xbe>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c80:	2280      	movs	r2, #128	; 0x80
 8000c82:	0052      	lsls	r2, r2, #1
 8000c84:	431a      	orrs	r2, r3
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e0a8      	b.n	8000de0 <HAL_FDCAN_GetRxMessage+0x210>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2298      	movs	r2, #152	; 0x98
 8000c94:	589b      	ldr	r3, [r3, r2]
 8000c96:	0e1b      	lsrs	r3, r3, #24
 8000c98:	2201      	movs	r2, #1
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d10a      	bne.n	8000cb6 <HAL_FDCAN_GetRxMessage+0xe6>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2280      	movs	r2, #128	; 0x80
 8000ca6:	589b      	ldr	r3, [r3, r2]
 8000ca8:	0a1b      	lsrs	r3, r3, #8
 8000caa:	2201      	movs	r2, #1
 8000cac:	4013      	ands	r3, r2
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d101      	bne.n	8000cb6 <HAL_FDCAN_GetRxMessage+0xe6>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2298      	movs	r2, #152	; 0x98
 8000cbc:	589b      	ldr	r3, [r3, r2]
 8000cbe:	0a1b      	lsrs	r3, r3, #8
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	69fa      	ldr	r2, [r7, #28]
 8000cc6:	18d3      	adds	r3, r2, r3
 8000cc8:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8000cce:	69fa      	ldr	r2, [r7, #28]
 8000cd0:	0013      	movs	r3, r2
 8000cd2:	00db      	lsls	r3, r3, #3
 8000cd4:	189b      	adds	r3, r3, r2
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	18cb      	adds	r3, r1, r3
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8000cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	2380      	movs	r3, #128	; 0x80
 8000ce2:	05db      	lsls	r3, r3, #23
 8000ce4:	401a      	ands	r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d107      	bne.n	8000d02 <HAL_FDCAN_GetRxMessage+0x132>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8000cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	0c9b      	lsrs	r3, r3, #18
 8000cf8:	055b      	lsls	r3, r3, #21
 8000cfa:	0d5a      	lsrs	r2, r3, #21
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	e005      	b.n	8000d0e <HAL_FDCAN_GetRxMessage+0x13e>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8000d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	00db      	lsls	r3, r3, #3
 8000d08:	08da      	lsrs	r2, r3, #3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8000d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	2380      	movs	r3, #128	; 0x80
 8000d14:	059b      	lsls	r3, r3, #22
 8000d16:	401a      	ands	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8000d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	0fdb      	lsrs	r3, r3, #31
 8000d22:	07da      	lsls	r2, r3, #31
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8000d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2a:	3304      	adds	r3, #4
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	041b      	lsls	r3, r3, #16
 8000d34:	0c1a      	lsrs	r2, r3, #16
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	0c1b      	lsrs	r3, r3, #16
 8000d40:	220f      	movs	r2, #15
 8000d42:	401a      	ands	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8000d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	2380      	movs	r3, #128	; 0x80
 8000d4e:	035b      	lsls	r3, r3, #13
 8000d50:	401a      	ands	r2, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8000d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	2380      	movs	r3, #128	; 0x80
 8000d5c:	039b      	lsls	r3, r3, #14
 8000d5e:	401a      	ands	r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8000d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	0e1b      	lsrs	r3, r3, #24
 8000d6a:	227f      	movs	r2, #127	; 0x7f
 8000d6c:	401a      	ands	r2, r3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8000d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	0fda      	lsrs	r2, r3, #31
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8000d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7e:	3304      	adds	r3, #4
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8000d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d84:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8000d86:	2300      	movs	r3, #0
 8000d88:	623b      	str	r3, [r7, #32]
 8000d8a:	e00a      	b.n	8000da2 <HAL_FDCAN_GetRxMessage+0x1d2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	6a3b      	ldr	r3, [r7, #32]
 8000d90:	18d2      	adds	r2, r2, r3
 8000d92:	6839      	ldr	r1, [r7, #0]
 8000d94:	6a3b      	ldr	r3, [r7, #32]
 8000d96:	18cb      	adds	r3, r1, r3
 8000d98:	7812      	ldrb	r2, [r2, #0]
 8000d9a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8000d9c:	6a3b      	ldr	r3, [r7, #32]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	623b      	str	r3, [r7, #32]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	4a10      	ldr	r2, [pc, #64]	; (8000de8 <HAL_FDCAN_GetRxMessage+0x218>)
 8000da8:	5cd3      	ldrb	r3, [r2, r3]
 8000daa:	001a      	movs	r2, r3
 8000dac:	6a3b      	ldr	r3, [r7, #32]
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d3ec      	bcc.n	8000d8c <HAL_FDCAN_GetRxMessage+0x1bc>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	2b40      	cmp	r3, #64	; 0x40
 8000db6:	d105      	bne.n	8000dc4 <HAL_FDCAN_GetRxMessage+0x1f4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2194      	movs	r1, #148	; 0x94
 8000dbe:	69fa      	ldr	r2, [r7, #28]
 8000dc0:	505a      	str	r2, [r3, r1]
 8000dc2:	e004      	b.n	8000dce <HAL_FDCAN_GetRxMessage+0x1fe>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	219c      	movs	r1, #156	; 0x9c
 8000dca:	69fa      	ldr	r2, [r7, #28]
 8000dcc:	505a      	str	r2, [r3, r1]
    }

    /* Return function status */
    return HAL_OK;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e006      	b.n	8000de0 <HAL_FDCAN_GetRxMessage+0x210>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd6:	2208      	movs	r2, #8
 8000dd8:	431a      	orrs	r2, r3
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
  }
}
 8000de0:	0018      	movs	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b00a      	add	sp, #40	; 0x28
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	0800218c 	.word	0x0800218c

08000dec <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(const FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	2b40      	cmp	r3, #64	; 0x40
 8000dfa:	d107      	bne.n	8000e0c <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2290      	movs	r2, #144	; 0x90
 8000e02:	589b      	ldr	r3, [r3, r2]
 8000e04:	220f      	movs	r2, #15
 8000e06:	4013      	ands	r3, r2
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	e006      	b.n	8000e1a <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2298      	movs	r2, #152	; 0x98
 8000e12:	589b      	ldr	r3, [r3, r2]
 8000e14:	220f      	movs	r2, #15
 8000e16:	4013      	ands	r3, r2
 8000e18:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
}
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	b004      	add	sp, #16
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8000e2c:	4b2f      	ldr	r3, [pc, #188]	; (8000eec <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 8000e2e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a2e      	ldr	r2, [pc, #184]	; (8000ef0 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d105      	bne.n	8000e46 <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	22d4      	movs	r2, #212	; 0xd4
 8000e3e:	0092      	lsls	r2, r2, #2
 8000e40:	4694      	mov	ip, r2
 8000e42:	4463      	add	r3, ip
 8000e44:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	68ba      	ldr	r2, [r7, #8]
 8000e4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2280      	movs	r2, #128	; 0x80
 8000e52:	589b      	ldr	r3, [r3, r2]
 8000e54:	4a27      	ldr	r2, [pc, #156]	; (8000ef4 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8000e56:	4013      	ands	r3, r2
 8000e58:	0019      	movs	r1, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e5e:	041a      	lsls	r2, r3, #16
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	430a      	orrs	r2, r1
 8000e66:	2180      	movs	r1, #128	; 0x80
 8000e68:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	3370      	adds	r3, #112	; 0x70
 8000e6e:	001a      	movs	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2280      	movs	r2, #128	; 0x80
 8000e7a:	589b      	ldr	r3, [r3, r2]
 8000e7c:	4a1e      	ldr	r2, [pc, #120]	; (8000ef8 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8000e7e:	4013      	ands	r3, r2
 8000e80:	0019      	movs	r1, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e86:	061a      	lsls	r2, r3, #24
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	2180      	movs	r1, #128	; 0x80
 8000e90:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	33b0      	adds	r3, #176	; 0xb0
 8000e96:	001a      	movs	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	3389      	adds	r3, #137	; 0x89
 8000ea0:	33ff      	adds	r3, #255	; 0xff
 8000ea2:	001a      	movs	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	2298      	movs	r2, #152	; 0x98
 8000eac:	0092      	lsls	r2, r2, #2
 8000eae:	189a      	adds	r2, r3, r2
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	229e      	movs	r2, #158	; 0x9e
 8000eb8:	0092      	lsls	r2, r2, #2
 8000eba:	189a      	adds	r2, r3, r2
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	e005      	b.n	8000ed2 <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	3304      	adds	r3, #4
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	22d4      	movs	r2, #212	; 0xd4
 8000ed6:	0092      	lsls	r2, r2, #2
 8000ed8:	4694      	mov	ip, r2
 8000eda:	4463      	add	r3, ip
 8000edc:	68fa      	ldr	r2, [r7, #12]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d3f1      	bcc.n	8000ec6 <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	46c0      	nop			; (mov r8, r8)
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b004      	add	sp, #16
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	4000b400 	.word	0x4000b400
 8000ef0:	40006800 	.word	0x40006800
 8000ef4:	ffe0ffff 	.word	0xffe0ffff
 8000ef8:	f0ffffff 	.word	0xf0ffffff

08000efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f0a:	e14d      	b.n	80011a8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2101      	movs	r1, #1
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	4091      	lsls	r1, r2
 8000f16:	000a      	movs	r2, r1
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d100      	bne.n	8000f24 <HAL_GPIO_Init+0x28>
 8000f22:	e13e      	b.n	80011a2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2203      	movs	r2, #3
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d005      	beq.n	8000f3c <HAL_GPIO_Init+0x40>
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2203      	movs	r2, #3
 8000f36:	4013      	ands	r3, r2
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d130      	bne.n	8000f9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	2203      	movs	r2, #3
 8000f48:	409a      	lsls	r2, r3
 8000f4a:	0013      	movs	r3, r2
 8000f4c:	43da      	mvns	r2, r3
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	68da      	ldr	r2, [r3, #12]
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	409a      	lsls	r2, r3
 8000f5e:	0013      	movs	r3, r2
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f72:	2201      	movs	r2, #1
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	409a      	lsls	r2, r3
 8000f78:	0013      	movs	r3, r2
 8000f7a:	43da      	mvns	r2, r3
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	091b      	lsrs	r3, r3, #4
 8000f88:	2201      	movs	r2, #1
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	409a      	lsls	r2, r3
 8000f90:	0013      	movs	r3, r2
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	2b03      	cmp	r3, #3
 8000fa8:	d017      	beq.n	8000fda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	409a      	lsls	r2, r3
 8000fb8:	0013      	movs	r3, r2
 8000fba:	43da      	mvns	r2, r3
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	409a      	lsls	r2, r3
 8000fcc:	0013      	movs	r3, r2
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2203      	movs	r2, #3
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d123      	bne.n	800102e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	08da      	lsrs	r2, r3, #3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	3208      	adds	r2, #8
 8000fee:	0092      	lsls	r2, r2, #2
 8000ff0:	58d3      	ldr	r3, [r2, r3]
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	2207      	movs	r2, #7
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	220f      	movs	r2, #15
 8000ffe:	409a      	lsls	r2, r3
 8001000:	0013      	movs	r3, r2
 8001002:	43da      	mvns	r2, r3
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	691a      	ldr	r2, [r3, #16]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	2107      	movs	r1, #7
 8001012:	400b      	ands	r3, r1
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	409a      	lsls	r2, r3
 8001018:	0013      	movs	r3, r2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	08da      	lsrs	r2, r3, #3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3208      	adds	r2, #8
 8001028:	0092      	lsls	r2, r2, #2
 800102a:	6939      	ldr	r1, [r7, #16]
 800102c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	2203      	movs	r2, #3
 800103a:	409a      	lsls	r2, r3
 800103c:	0013      	movs	r3, r2
 800103e:	43da      	mvns	r2, r3
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	2203      	movs	r2, #3
 800104c:	401a      	ands	r2, r3
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	409a      	lsls	r2, r3
 8001054:	0013      	movs	r3, r2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685a      	ldr	r2, [r3, #4]
 8001066:	23c0      	movs	r3, #192	; 0xc0
 8001068:	029b      	lsls	r3, r3, #10
 800106a:	4013      	ands	r3, r2
 800106c:	d100      	bne.n	8001070 <HAL_GPIO_Init+0x174>
 800106e:	e098      	b.n	80011a2 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001070:	4a53      	ldr	r2, [pc, #332]	; (80011c0 <HAL_GPIO_Init+0x2c4>)
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	089b      	lsrs	r3, r3, #2
 8001076:	3318      	adds	r3, #24
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	589b      	ldr	r3, [r3, r2]
 800107c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	2203      	movs	r2, #3
 8001082:	4013      	ands	r3, r2
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	220f      	movs	r2, #15
 8001088:	409a      	lsls	r2, r3
 800108a:	0013      	movs	r3, r2
 800108c:	43da      	mvns	r2, r3
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	23a0      	movs	r3, #160	; 0xa0
 8001098:	05db      	lsls	r3, r3, #23
 800109a:	429a      	cmp	r2, r3
 800109c:	d019      	beq.n	80010d2 <HAL_GPIO_Init+0x1d6>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a48      	ldr	r2, [pc, #288]	; (80011c4 <HAL_GPIO_Init+0x2c8>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d013      	beq.n	80010ce <HAL_GPIO_Init+0x1d2>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a47      	ldr	r2, [pc, #284]	; (80011c8 <HAL_GPIO_Init+0x2cc>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d00d      	beq.n	80010ca <HAL_GPIO_Init+0x1ce>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a46      	ldr	r2, [pc, #280]	; (80011cc <HAL_GPIO_Init+0x2d0>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d007      	beq.n	80010c6 <HAL_GPIO_Init+0x1ca>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a45      	ldr	r2, [pc, #276]	; (80011d0 <HAL_GPIO_Init+0x2d4>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d101      	bne.n	80010c2 <HAL_GPIO_Init+0x1c6>
 80010be:	2304      	movs	r3, #4
 80010c0:	e008      	b.n	80010d4 <HAL_GPIO_Init+0x1d8>
 80010c2:	2305      	movs	r3, #5
 80010c4:	e006      	b.n	80010d4 <HAL_GPIO_Init+0x1d8>
 80010c6:	2303      	movs	r3, #3
 80010c8:	e004      	b.n	80010d4 <HAL_GPIO_Init+0x1d8>
 80010ca:	2302      	movs	r3, #2
 80010cc:	e002      	b.n	80010d4 <HAL_GPIO_Init+0x1d8>
 80010ce:	2301      	movs	r3, #1
 80010d0:	e000      	b.n	80010d4 <HAL_GPIO_Init+0x1d8>
 80010d2:	2300      	movs	r3, #0
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	2103      	movs	r1, #3
 80010d8:	400a      	ands	r2, r1
 80010da:	00d2      	lsls	r2, r2, #3
 80010dc:	4093      	lsls	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80010e4:	4936      	ldr	r1, [pc, #216]	; (80011c0 <HAL_GPIO_Init+0x2c4>)
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	089b      	lsrs	r3, r3, #2
 80010ea:	3318      	adds	r3, #24
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010f2:	4b33      	ldr	r3, [pc, #204]	; (80011c0 <HAL_GPIO_Init+0x2c4>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	43da      	mvns	r2, r3
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	2380      	movs	r3, #128	; 0x80
 8001108:	035b      	lsls	r3, r3, #13
 800110a:	4013      	ands	r3, r2
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4313      	orrs	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001116:	4b2a      	ldr	r3, [pc, #168]	; (80011c0 <HAL_GPIO_Init+0x2c4>)
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800111c:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <HAL_GPIO_Init+0x2c4>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	43da      	mvns	r2, r3
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	4013      	ands	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	2380      	movs	r3, #128	; 0x80
 8001132:	039b      	lsls	r3, r3, #14
 8001134:	4013      	ands	r3, r2
 8001136:	d003      	beq.n	8001140 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001140:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <HAL_GPIO_Init+0x2c4>)
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001146:	4a1e      	ldr	r2, [pc, #120]	; (80011c0 <HAL_GPIO_Init+0x2c4>)
 8001148:	2384      	movs	r3, #132	; 0x84
 800114a:	58d3      	ldr	r3, [r2, r3]
 800114c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	43da      	mvns	r2, r3
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685a      	ldr	r2, [r3, #4]
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	029b      	lsls	r3, r3, #10
 8001160:	4013      	ands	r3, r2
 8001162:	d003      	beq.n	800116c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800116c:	4914      	ldr	r1, [pc, #80]	; (80011c0 <HAL_GPIO_Init+0x2c4>)
 800116e:	2284      	movs	r2, #132	; 0x84
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001174:	4a12      	ldr	r2, [pc, #72]	; (80011c0 <HAL_GPIO_Init+0x2c4>)
 8001176:	2380      	movs	r3, #128	; 0x80
 8001178:	58d3      	ldr	r3, [r2, r3]
 800117a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	43da      	mvns	r2, r3
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	4013      	ands	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	2380      	movs	r3, #128	; 0x80
 800118c:	025b      	lsls	r3, r3, #9
 800118e:	4013      	ands	r3, r2
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4313      	orrs	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800119a:	4909      	ldr	r1, [pc, #36]	; (80011c0 <HAL_GPIO_Init+0x2c4>)
 800119c:	2280      	movs	r2, #128	; 0x80
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	3301      	adds	r3, #1
 80011a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	40da      	lsrs	r2, r3
 80011b0:	1e13      	subs	r3, r2, #0
 80011b2:	d000      	beq.n	80011b6 <HAL_GPIO_Init+0x2ba>
 80011b4:	e6aa      	b.n	8000f0c <HAL_GPIO_Init+0x10>
  }
}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	46c0      	nop			; (mov r8, r8)
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b006      	add	sp, #24
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40021800 	.word	0x40021800
 80011c4:	50000400 	.word	0x50000400
 80011c8:	50000800 	.word	0x50000800
 80011cc:	50000c00 	.word	0x50000c00
 80011d0:	50001000 	.word	0x50001000

080011d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	0008      	movs	r0, r1
 80011de:	0011      	movs	r1, r2
 80011e0:	1cbb      	adds	r3, r7, #2
 80011e2:	1c02      	adds	r2, r0, #0
 80011e4:	801a      	strh	r2, [r3, #0]
 80011e6:	1c7b      	adds	r3, r7, #1
 80011e8:	1c0a      	adds	r2, r1, #0
 80011ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011ec:	1c7b      	adds	r3, r7, #1
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d004      	beq.n	80011fe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011f4:	1cbb      	adds	r3, r7, #2
 80011f6:	881a      	ldrh	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011fc:	e003      	b.n	8001206 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011fe:	1cbb      	adds	r3, r7, #2
 8001200:	881a      	ldrh	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	46bd      	mov	sp, r7
 800120a:	b002      	add	sp, #8
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001218:	4b19      	ldr	r3, [pc, #100]	; (8001280 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a19      	ldr	r2, [pc, #100]	; (8001284 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800121e:	4013      	ands	r3, r2
 8001220:	0019      	movs	r1, r3
 8001222:	4b17      	ldr	r3, [pc, #92]	; (8001280 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	430a      	orrs	r2, r1
 8001228:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	2380      	movs	r3, #128	; 0x80
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	429a      	cmp	r2, r3
 8001232:	d11f      	bne.n	8001274 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001234:	4b14      	ldr	r3, [pc, #80]	; (8001288 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	0013      	movs	r3, r2
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	189b      	adds	r3, r3, r2
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	4912      	ldr	r1, [pc, #72]	; (800128c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001242:	0018      	movs	r0, r3
 8001244:	f7fe ff5e 	bl	8000104 <__udivsi3>
 8001248:	0003      	movs	r3, r0
 800124a:	3301      	adds	r3, #1
 800124c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800124e:	e008      	b.n	8001262 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	3b01      	subs	r3, #1
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	e001      	b.n	8001262 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e009      	b.n	8001276 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001262:	4b07      	ldr	r3, [pc, #28]	; (8001280 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001264:	695a      	ldr	r2, [r3, #20]
 8001266:	2380      	movs	r3, #128	; 0x80
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	401a      	ands	r2, r3
 800126c:	2380      	movs	r3, #128	; 0x80
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	429a      	cmp	r2, r3
 8001272:	d0ed      	beq.n	8001250 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	0018      	movs	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	b004      	add	sp, #16
 800127c:	bd80      	pop	{r7, pc}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	40007000 	.word	0x40007000
 8001284:	fffff9ff 	.word	0xfffff9ff
 8001288:	20000000 	.word	0x20000000
 800128c:	000f4240 	.word	0x000f4240

08001290 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d102      	bne.n	80012a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	f000 fb50 	bl	8001944 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2201      	movs	r2, #1
 80012aa:	4013      	ands	r3, r2
 80012ac:	d100      	bne.n	80012b0 <HAL_RCC_OscConfig+0x20>
 80012ae:	e07c      	b.n	80013aa <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012b0:	4bc3      	ldr	r3, [pc, #780]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	2238      	movs	r2, #56	; 0x38
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012ba:	4bc1      	ldr	r3, [pc, #772]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	2203      	movs	r2, #3
 80012c0:	4013      	ands	r3, r2
 80012c2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	2b10      	cmp	r3, #16
 80012c8:	d102      	bne.n	80012d0 <HAL_RCC_OscConfig+0x40>
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	2b03      	cmp	r3, #3
 80012ce:	d002      	beq.n	80012d6 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	2b08      	cmp	r3, #8
 80012d4:	d10b      	bne.n	80012ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d6:	4bba      	ldr	r3, [pc, #744]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	2380      	movs	r3, #128	; 0x80
 80012dc:	029b      	lsls	r3, r3, #10
 80012de:	4013      	ands	r3, r2
 80012e0:	d062      	beq.n	80013a8 <HAL_RCC_OscConfig+0x118>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d15e      	bne.n	80013a8 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e32a      	b.n	8001944 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	2380      	movs	r3, #128	; 0x80
 80012f4:	025b      	lsls	r3, r3, #9
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d107      	bne.n	800130a <HAL_RCC_OscConfig+0x7a>
 80012fa:	4bb1      	ldr	r3, [pc, #708]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	4bb0      	ldr	r3, [pc, #704]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 8001300:	2180      	movs	r1, #128	; 0x80
 8001302:	0249      	lsls	r1, r1, #9
 8001304:	430a      	orrs	r2, r1
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	e020      	b.n	800134c <HAL_RCC_OscConfig+0xbc>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	23a0      	movs	r3, #160	; 0xa0
 8001310:	02db      	lsls	r3, r3, #11
 8001312:	429a      	cmp	r2, r3
 8001314:	d10e      	bne.n	8001334 <HAL_RCC_OscConfig+0xa4>
 8001316:	4baa      	ldr	r3, [pc, #680]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	4ba9      	ldr	r3, [pc, #676]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 800131c:	2180      	movs	r1, #128	; 0x80
 800131e:	02c9      	lsls	r1, r1, #11
 8001320:	430a      	orrs	r2, r1
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	4ba6      	ldr	r3, [pc, #664]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4ba5      	ldr	r3, [pc, #660]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 800132a:	2180      	movs	r1, #128	; 0x80
 800132c:	0249      	lsls	r1, r1, #9
 800132e:	430a      	orrs	r2, r1
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	e00b      	b.n	800134c <HAL_RCC_OscConfig+0xbc>
 8001334:	4ba2      	ldr	r3, [pc, #648]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4ba1      	ldr	r3, [pc, #644]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 800133a:	49a2      	ldr	r1, [pc, #648]	; (80015c4 <HAL_RCC_OscConfig+0x334>)
 800133c:	400a      	ands	r2, r1
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	4b9f      	ldr	r3, [pc, #636]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4b9e      	ldr	r3, [pc, #632]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 8001346:	49a0      	ldr	r1, [pc, #640]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 8001348:	400a      	ands	r2, r1
 800134a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d014      	beq.n	800137e <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001354:	f7ff f9ce 	bl	80006f4 <HAL_GetTick>
 8001358:	0003      	movs	r3, r0
 800135a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800135c:	e008      	b.n	8001370 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800135e:	f7ff f9c9 	bl	80006f4 <HAL_GetTick>
 8001362:	0002      	movs	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b64      	cmp	r3, #100	; 0x64
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e2e9      	b.n	8001944 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001370:	4b93      	ldr	r3, [pc, #588]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	2380      	movs	r3, #128	; 0x80
 8001376:	029b      	lsls	r3, r3, #10
 8001378:	4013      	ands	r3, r2
 800137a:	d0f0      	beq.n	800135e <HAL_RCC_OscConfig+0xce>
 800137c:	e015      	b.n	80013aa <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137e:	f7ff f9b9 	bl	80006f4 <HAL_GetTick>
 8001382:	0003      	movs	r3, r0
 8001384:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001388:	f7ff f9b4 	bl	80006f4 <HAL_GetTick>
 800138c:	0002      	movs	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b64      	cmp	r3, #100	; 0x64
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e2d4      	b.n	8001944 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800139a:	4b89      	ldr	r3, [pc, #548]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	2380      	movs	r3, #128	; 0x80
 80013a0:	029b      	lsls	r3, r3, #10
 80013a2:	4013      	ands	r3, r2
 80013a4:	d1f0      	bne.n	8001388 <HAL_RCC_OscConfig+0xf8>
 80013a6:	e000      	b.n	80013aa <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2202      	movs	r2, #2
 80013b0:	4013      	ands	r3, r2
 80013b2:	d100      	bne.n	80013b6 <HAL_RCC_OscConfig+0x126>
 80013b4:	e099      	b.n	80014ea <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013b6:	4b82      	ldr	r3, [pc, #520]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	2238      	movs	r2, #56	; 0x38
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013c0:	4b7f      	ldr	r3, [pc, #508]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	2203      	movs	r2, #3
 80013c6:	4013      	ands	r3, r2
 80013c8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	2b10      	cmp	r3, #16
 80013ce:	d102      	bne.n	80013d6 <HAL_RCC_OscConfig+0x146>
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d002      	beq.n	80013dc <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d135      	bne.n	8001448 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013dc:	4b78      	ldr	r3, [pc, #480]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	2380      	movs	r3, #128	; 0x80
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	4013      	ands	r3, r2
 80013e6:	d005      	beq.n	80013f4 <HAL_RCC_OscConfig+0x164>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d101      	bne.n	80013f4 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e2a7      	b.n	8001944 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f4:	4b72      	ldr	r3, [pc, #456]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	4a74      	ldr	r2, [pc, #464]	; (80015cc <HAL_RCC_OscConfig+0x33c>)
 80013fa:	4013      	ands	r3, r2
 80013fc:	0019      	movs	r1, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	021a      	lsls	r2, r3, #8
 8001404:	4b6e      	ldr	r3, [pc, #440]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 8001406:	430a      	orrs	r2, r1
 8001408:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d112      	bne.n	8001436 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001410:	4b6b      	ldr	r3, [pc, #428]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a6e      	ldr	r2, [pc, #440]	; (80015d0 <HAL_RCC_OscConfig+0x340>)
 8001416:	4013      	ands	r3, r2
 8001418:	0019      	movs	r1, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	691a      	ldr	r2, [r3, #16]
 800141e:	4b68      	ldr	r3, [pc, #416]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 8001420:	430a      	orrs	r2, r1
 8001422:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001424:	4b66      	ldr	r3, [pc, #408]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	0adb      	lsrs	r3, r3, #11
 800142a:	2207      	movs	r2, #7
 800142c:	4013      	ands	r3, r2
 800142e:	4a69      	ldr	r2, [pc, #420]	; (80015d4 <HAL_RCC_OscConfig+0x344>)
 8001430:	40da      	lsrs	r2, r3
 8001432:	4b69      	ldr	r3, [pc, #420]	; (80015d8 <HAL_RCC_OscConfig+0x348>)
 8001434:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001436:	4b69      	ldr	r3, [pc, #420]	; (80015dc <HAL_RCC_OscConfig+0x34c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	0018      	movs	r0, r3
 800143c:	f7ff f8fe 	bl	800063c <HAL_InitTick>
 8001440:	1e03      	subs	r3, r0, #0
 8001442:	d051      	beq.n	80014e8 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e27d      	b.n	8001944 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d030      	beq.n	80014b2 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001450:	4b5b      	ldr	r3, [pc, #364]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a5e      	ldr	r2, [pc, #376]	; (80015d0 <HAL_RCC_OscConfig+0x340>)
 8001456:	4013      	ands	r3, r2
 8001458:	0019      	movs	r1, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	691a      	ldr	r2, [r3, #16]
 800145e:	4b58      	ldr	r3, [pc, #352]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 8001460:	430a      	orrs	r2, r1
 8001462:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001464:	4b56      	ldr	r3, [pc, #344]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b55      	ldr	r3, [pc, #340]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 800146a:	2180      	movs	r1, #128	; 0x80
 800146c:	0049      	lsls	r1, r1, #1
 800146e:	430a      	orrs	r2, r1
 8001470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001472:	f7ff f93f 	bl	80006f4 <HAL_GetTick>
 8001476:	0003      	movs	r3, r0
 8001478:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800147c:	f7ff f93a 	bl	80006f4 <HAL_GetTick>
 8001480:	0002      	movs	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e25a      	b.n	8001944 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800148e:	4b4c      	ldr	r3, [pc, #304]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	2380      	movs	r3, #128	; 0x80
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	4013      	ands	r3, r2
 8001498:	d0f0      	beq.n	800147c <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149a:	4b49      	ldr	r3, [pc, #292]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	4a4b      	ldr	r2, [pc, #300]	; (80015cc <HAL_RCC_OscConfig+0x33c>)
 80014a0:	4013      	ands	r3, r2
 80014a2:	0019      	movs	r1, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	695b      	ldr	r3, [r3, #20]
 80014a8:	021a      	lsls	r2, r3, #8
 80014aa:	4b45      	ldr	r3, [pc, #276]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 80014ac:	430a      	orrs	r2, r1
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	e01b      	b.n	80014ea <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80014b2:	4b43      	ldr	r3, [pc, #268]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	4b42      	ldr	r3, [pc, #264]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 80014b8:	4949      	ldr	r1, [pc, #292]	; (80015e0 <HAL_RCC_OscConfig+0x350>)
 80014ba:	400a      	ands	r2, r1
 80014bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014be:	f7ff f919 	bl	80006f4 <HAL_GetTick>
 80014c2:	0003      	movs	r3, r0
 80014c4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c8:	f7ff f914 	bl	80006f4 <HAL_GetTick>
 80014cc:	0002      	movs	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e234      	b.n	8001944 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014da:	4b39      	ldr	r3, [pc, #228]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	2380      	movs	r3, #128	; 0x80
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	4013      	ands	r3, r2
 80014e4:	d1f0      	bne.n	80014c8 <HAL_RCC_OscConfig+0x238>
 80014e6:	e000      	b.n	80014ea <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014e8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2208      	movs	r2, #8
 80014f0:	4013      	ands	r3, r2
 80014f2:	d047      	beq.n	8001584 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80014f4:	4b32      	ldr	r3, [pc, #200]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	2238      	movs	r2, #56	; 0x38
 80014fa:	4013      	ands	r3, r2
 80014fc:	2b18      	cmp	r3, #24
 80014fe:	d10a      	bne.n	8001516 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001500:	4b2f      	ldr	r3, [pc, #188]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 8001502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001504:	2202      	movs	r2, #2
 8001506:	4013      	ands	r3, r2
 8001508:	d03c      	beq.n	8001584 <HAL_RCC_OscConfig+0x2f4>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d138      	bne.n	8001584 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e216      	b.n	8001944 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d019      	beq.n	8001552 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800151e:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 8001520:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001522:	4b27      	ldr	r3, [pc, #156]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 8001524:	2101      	movs	r1, #1
 8001526:	430a      	orrs	r2, r1
 8001528:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152a:	f7ff f8e3 	bl	80006f4 <HAL_GetTick>
 800152e:	0003      	movs	r3, r0
 8001530:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001534:	f7ff f8de 	bl	80006f4 <HAL_GetTick>
 8001538:	0002      	movs	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e1fe      	b.n	8001944 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001546:	4b1e      	ldr	r3, [pc, #120]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 8001548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800154a:	2202      	movs	r2, #2
 800154c:	4013      	ands	r3, r2
 800154e:	d0f1      	beq.n	8001534 <HAL_RCC_OscConfig+0x2a4>
 8001550:	e018      	b.n	8001584 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001552:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 8001554:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001556:	4b1a      	ldr	r3, [pc, #104]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 8001558:	2101      	movs	r1, #1
 800155a:	438a      	bics	r2, r1
 800155c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155e:	f7ff f8c9 	bl	80006f4 <HAL_GetTick>
 8001562:	0003      	movs	r3, r0
 8001564:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001568:	f7ff f8c4 	bl	80006f4 <HAL_GetTick>
 800156c:	0002      	movs	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e1e4      	b.n	8001944 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800157a:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 800157c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157e:	2202      	movs	r2, #2
 8001580:	4013      	ands	r3, r2
 8001582:	d1f1      	bne.n	8001568 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2204      	movs	r2, #4
 800158a:	4013      	ands	r3, r2
 800158c:	d100      	bne.n	8001590 <HAL_RCC_OscConfig+0x300>
 800158e:	e0c7      	b.n	8001720 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001590:	231f      	movs	r3, #31
 8001592:	18fb      	adds	r3, r7, r3
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001598:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	2238      	movs	r2, #56	; 0x38
 800159e:	4013      	ands	r3, r2
 80015a0:	2b20      	cmp	r3, #32
 80015a2:	d11f      	bne.n	80015e4 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <HAL_RCC_OscConfig+0x330>)
 80015a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a8:	2202      	movs	r2, #2
 80015aa:	4013      	ands	r3, r2
 80015ac:	d100      	bne.n	80015b0 <HAL_RCC_OscConfig+0x320>
 80015ae:	e0b7      	b.n	8001720 <HAL_RCC_OscConfig+0x490>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d000      	beq.n	80015ba <HAL_RCC_OscConfig+0x32a>
 80015b8:	e0b2      	b.n	8001720 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e1c2      	b.n	8001944 <HAL_RCC_OscConfig+0x6b4>
 80015be:	46c0      	nop			; (mov r8, r8)
 80015c0:	40021000 	.word	0x40021000
 80015c4:	fffeffff 	.word	0xfffeffff
 80015c8:	fffbffff 	.word	0xfffbffff
 80015cc:	ffff80ff 	.word	0xffff80ff
 80015d0:	ffffc7ff 	.word	0xffffc7ff
 80015d4:	00f42400 	.word	0x00f42400
 80015d8:	20000000 	.word	0x20000000
 80015dc:	20000004 	.word	0x20000004
 80015e0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80015e4:	4bb5      	ldr	r3, [pc, #724]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 80015e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015e8:	2380      	movs	r3, #128	; 0x80
 80015ea:	055b      	lsls	r3, r3, #21
 80015ec:	4013      	ands	r3, r2
 80015ee:	d101      	bne.n	80015f4 <HAL_RCC_OscConfig+0x364>
 80015f0:	2301      	movs	r3, #1
 80015f2:	e000      	b.n	80015f6 <HAL_RCC_OscConfig+0x366>
 80015f4:	2300      	movs	r3, #0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d011      	beq.n	800161e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80015fa:	4bb0      	ldr	r3, [pc, #704]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 80015fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015fe:	4baf      	ldr	r3, [pc, #700]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 8001600:	2180      	movs	r1, #128	; 0x80
 8001602:	0549      	lsls	r1, r1, #21
 8001604:	430a      	orrs	r2, r1
 8001606:	63da      	str	r2, [r3, #60]	; 0x3c
 8001608:	4bac      	ldr	r3, [pc, #688]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 800160a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800160c:	2380      	movs	r3, #128	; 0x80
 800160e:	055b      	lsls	r3, r3, #21
 8001610:	4013      	ands	r3, r2
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001616:	231f      	movs	r3, #31
 8001618:	18fb      	adds	r3, r7, r3
 800161a:	2201      	movs	r2, #1
 800161c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800161e:	4ba8      	ldr	r3, [pc, #672]	; (80018c0 <HAL_RCC_OscConfig+0x630>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	2380      	movs	r3, #128	; 0x80
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4013      	ands	r3, r2
 8001628:	d11a      	bne.n	8001660 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800162a:	4ba5      	ldr	r3, [pc, #660]	; (80018c0 <HAL_RCC_OscConfig+0x630>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	4ba4      	ldr	r3, [pc, #656]	; (80018c0 <HAL_RCC_OscConfig+0x630>)
 8001630:	2180      	movs	r1, #128	; 0x80
 8001632:	0049      	lsls	r1, r1, #1
 8001634:	430a      	orrs	r2, r1
 8001636:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001638:	f7ff f85c 	bl	80006f4 <HAL_GetTick>
 800163c:	0003      	movs	r3, r0
 800163e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001642:	f7ff f857 	bl	80006f4 <HAL_GetTick>
 8001646:	0002      	movs	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e177      	b.n	8001944 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001654:	4b9a      	ldr	r3, [pc, #616]	; (80018c0 <HAL_RCC_OscConfig+0x630>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	4013      	ands	r3, r2
 800165e:	d0f0      	beq.n	8001642 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d106      	bne.n	8001676 <HAL_RCC_OscConfig+0x3e6>
 8001668:	4b94      	ldr	r3, [pc, #592]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 800166a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800166c:	4b93      	ldr	r3, [pc, #588]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 800166e:	2101      	movs	r1, #1
 8001670:	430a      	orrs	r2, r1
 8001672:	65da      	str	r2, [r3, #92]	; 0x5c
 8001674:	e01c      	b.n	80016b0 <HAL_RCC_OscConfig+0x420>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2b05      	cmp	r3, #5
 800167c:	d10c      	bne.n	8001698 <HAL_RCC_OscConfig+0x408>
 800167e:	4b8f      	ldr	r3, [pc, #572]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 8001680:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001682:	4b8e      	ldr	r3, [pc, #568]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 8001684:	2104      	movs	r1, #4
 8001686:	430a      	orrs	r2, r1
 8001688:	65da      	str	r2, [r3, #92]	; 0x5c
 800168a:	4b8c      	ldr	r3, [pc, #560]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 800168c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800168e:	4b8b      	ldr	r3, [pc, #556]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 8001690:	2101      	movs	r1, #1
 8001692:	430a      	orrs	r2, r1
 8001694:	65da      	str	r2, [r3, #92]	; 0x5c
 8001696:	e00b      	b.n	80016b0 <HAL_RCC_OscConfig+0x420>
 8001698:	4b88      	ldr	r3, [pc, #544]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 800169a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800169c:	4b87      	ldr	r3, [pc, #540]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 800169e:	2101      	movs	r1, #1
 80016a0:	438a      	bics	r2, r1
 80016a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80016a4:	4b85      	ldr	r3, [pc, #532]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 80016a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016a8:	4b84      	ldr	r3, [pc, #528]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 80016aa:	2104      	movs	r1, #4
 80016ac:	438a      	bics	r2, r1
 80016ae:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d014      	beq.n	80016e2 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b8:	f7ff f81c 	bl	80006f4 <HAL_GetTick>
 80016bc:	0003      	movs	r3, r0
 80016be:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016c0:	e009      	b.n	80016d6 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c2:	f7ff f817 	bl	80006f4 <HAL_GetTick>
 80016c6:	0002      	movs	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	4a7d      	ldr	r2, [pc, #500]	; (80018c4 <HAL_RCC_OscConfig+0x634>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e136      	b.n	8001944 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016d6:	4b79      	ldr	r3, [pc, #484]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 80016d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016da:	2202      	movs	r2, #2
 80016dc:	4013      	ands	r3, r2
 80016de:	d0f0      	beq.n	80016c2 <HAL_RCC_OscConfig+0x432>
 80016e0:	e013      	b.n	800170a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e2:	f7ff f807 	bl	80006f4 <HAL_GetTick>
 80016e6:	0003      	movs	r3, r0
 80016e8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016ea:	e009      	b.n	8001700 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ec:	f7ff f802 	bl	80006f4 <HAL_GetTick>
 80016f0:	0002      	movs	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	4a73      	ldr	r2, [pc, #460]	; (80018c4 <HAL_RCC_OscConfig+0x634>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e121      	b.n	8001944 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001700:	4b6e      	ldr	r3, [pc, #440]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 8001702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001704:	2202      	movs	r2, #2
 8001706:	4013      	ands	r3, r2
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800170a:	231f      	movs	r3, #31
 800170c:	18fb      	adds	r3, r7, r3
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d105      	bne.n	8001720 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001714:	4b69      	ldr	r3, [pc, #420]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 8001716:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001718:	4b68      	ldr	r3, [pc, #416]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 800171a:	496b      	ldr	r1, [pc, #428]	; (80018c8 <HAL_RCC_OscConfig+0x638>)
 800171c:	400a      	ands	r2, r1
 800171e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2220      	movs	r2, #32
 8001726:	4013      	ands	r3, r2
 8001728:	d039      	beq.n	800179e <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d01b      	beq.n	800176a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001732:	4b62      	ldr	r3, [pc, #392]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	4b61      	ldr	r3, [pc, #388]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 8001738:	2180      	movs	r1, #128	; 0x80
 800173a:	03c9      	lsls	r1, r1, #15
 800173c:	430a      	orrs	r2, r1
 800173e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001740:	f7fe ffd8 	bl	80006f4 <HAL_GetTick>
 8001744:	0003      	movs	r3, r0
 8001746:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800174a:	f7fe ffd3 	bl	80006f4 <HAL_GetTick>
 800174e:	0002      	movs	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e0f3      	b.n	8001944 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800175c:	4b57      	ldr	r3, [pc, #348]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	041b      	lsls	r3, r3, #16
 8001764:	4013      	ands	r3, r2
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0x4ba>
 8001768:	e019      	b.n	800179e <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800176a:	4b54      	ldr	r3, [pc, #336]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	4b53      	ldr	r3, [pc, #332]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 8001770:	4956      	ldr	r1, [pc, #344]	; (80018cc <HAL_RCC_OscConfig+0x63c>)
 8001772:	400a      	ands	r2, r1
 8001774:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001776:	f7fe ffbd 	bl	80006f4 <HAL_GetTick>
 800177a:	0003      	movs	r3, r0
 800177c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001780:	f7fe ffb8 	bl	80006f4 <HAL_GetTick>
 8001784:	0002      	movs	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e0d8      	b.n	8001944 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001792:	4b4a      	ldr	r3, [pc, #296]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	2380      	movs	r3, #128	; 0x80
 8001798:	041b      	lsls	r3, r3, #16
 800179a:	4013      	ands	r3, r2
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a1b      	ldr	r3, [r3, #32]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d100      	bne.n	80017a8 <HAL_RCC_OscConfig+0x518>
 80017a6:	e0cc      	b.n	8001942 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017a8:	4b44      	ldr	r3, [pc, #272]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	2238      	movs	r2, #56	; 0x38
 80017ae:	4013      	ands	r3, r2
 80017b0:	2b10      	cmp	r3, #16
 80017b2:	d100      	bne.n	80017b6 <HAL_RCC_OscConfig+0x526>
 80017b4:	e07b      	b.n	80018ae <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d156      	bne.n	800186c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017be:	4b3f      	ldr	r3, [pc, #252]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	4b3e      	ldr	r3, [pc, #248]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 80017c4:	4942      	ldr	r1, [pc, #264]	; (80018d0 <HAL_RCC_OscConfig+0x640>)
 80017c6:	400a      	ands	r2, r1
 80017c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ca:	f7fe ff93 	bl	80006f4 <HAL_GetTick>
 80017ce:	0003      	movs	r3, r0
 80017d0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d4:	f7fe ff8e 	bl	80006f4 <HAL_GetTick>
 80017d8:	0002      	movs	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e0ae      	b.n	8001944 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017e6:	4b35      	ldr	r3, [pc, #212]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	2380      	movs	r3, #128	; 0x80
 80017ec:	049b      	lsls	r3, r3, #18
 80017ee:	4013      	ands	r3, r2
 80017f0:	d1f0      	bne.n	80017d4 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017f2:	4b32      	ldr	r3, [pc, #200]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	4a37      	ldr	r2, [pc, #220]	; (80018d4 <HAL_RCC_OscConfig+0x644>)
 80017f8:	4013      	ands	r3, r2
 80017fa:	0019      	movs	r1, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001804:	431a      	orrs	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180a:	021b      	lsls	r3, r3, #8
 800180c:	431a      	orrs	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001818:	431a      	orrs	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800181e:	431a      	orrs	r2, r3
 8001820:	4b26      	ldr	r3, [pc, #152]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 8001822:	430a      	orrs	r2, r1
 8001824:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001826:	4b25      	ldr	r3, [pc, #148]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	4b24      	ldr	r3, [pc, #144]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 800182c:	2180      	movs	r1, #128	; 0x80
 800182e:	0449      	lsls	r1, r1, #17
 8001830:	430a      	orrs	r2, r1
 8001832:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001834:	4b21      	ldr	r3, [pc, #132]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	4b20      	ldr	r3, [pc, #128]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 800183a:	2180      	movs	r1, #128	; 0x80
 800183c:	0549      	lsls	r1, r1, #21
 800183e:	430a      	orrs	r2, r1
 8001840:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001842:	f7fe ff57 	bl	80006f4 <HAL_GetTick>
 8001846:	0003      	movs	r3, r0
 8001848:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800184c:	f7fe ff52 	bl	80006f4 <HAL_GetTick>
 8001850:	0002      	movs	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e072      	b.n	8001944 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800185e:	4b17      	ldr	r3, [pc, #92]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	2380      	movs	r3, #128	; 0x80
 8001864:	049b      	lsls	r3, r3, #18
 8001866:	4013      	ands	r3, r2
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0x5bc>
 800186a:	e06a      	b.n	8001942 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186c:	4b13      	ldr	r3, [pc, #76]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 8001872:	4917      	ldr	r1, [pc, #92]	; (80018d0 <HAL_RCC_OscConfig+0x640>)
 8001874:	400a      	ands	r2, r1
 8001876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001878:	f7fe ff3c 	bl	80006f4 <HAL_GetTick>
 800187c:	0003      	movs	r3, r0
 800187e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001882:	f7fe ff37 	bl	80006f4 <HAL_GetTick>
 8001886:	0002      	movs	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e057      	b.n	8001944 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001894:	4b09      	ldr	r3, [pc, #36]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	2380      	movs	r3, #128	; 0x80
 800189a:	049b      	lsls	r3, r3, #18
 800189c:	4013      	ands	r3, r2
 800189e:	d1f0      	bne.n	8001882 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	4b05      	ldr	r3, [pc, #20]	; (80018bc <HAL_RCC_OscConfig+0x62c>)
 80018a6:	490c      	ldr	r1, [pc, #48]	; (80018d8 <HAL_RCC_OscConfig+0x648>)
 80018a8:	400a      	ands	r2, r1
 80018aa:	60da      	str	r2, [r3, #12]
 80018ac:	e049      	b.n	8001942 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d112      	bne.n	80018dc <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e044      	b.n	8001944 <HAL_RCC_OscConfig+0x6b4>
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40007000 	.word	0x40007000
 80018c4:	00001388 	.word	0x00001388
 80018c8:	efffffff 	.word	0xefffffff
 80018cc:	ffbfffff 	.word	0xffbfffff
 80018d0:	feffffff 	.word	0xfeffffff
 80018d4:	11c1808c 	.word	0x11c1808c
 80018d8:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80018dc:	4b1b      	ldr	r3, [pc, #108]	; (800194c <HAL_RCC_OscConfig+0x6bc>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	2203      	movs	r2, #3
 80018e6:	401a      	ands	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d126      	bne.n	800193e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	2270      	movs	r2, #112	; 0x70
 80018f4:	401a      	ands	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d11f      	bne.n	800193e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	23fe      	movs	r3, #254	; 0xfe
 8001902:	01db      	lsls	r3, r3, #7
 8001904:	401a      	ands	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800190c:	429a      	cmp	r2, r3
 800190e:	d116      	bne.n	800193e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	23f8      	movs	r3, #248	; 0xf8
 8001914:	039b      	lsls	r3, r3, #14
 8001916:	401a      	ands	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800191c:	429a      	cmp	r2, r3
 800191e:	d10e      	bne.n	800193e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	23e0      	movs	r3, #224	; 0xe0
 8001924:	051b      	lsls	r3, r3, #20
 8001926:	401a      	ands	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800192c:	429a      	cmp	r2, r3
 800192e:	d106      	bne.n	800193e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	0f5b      	lsrs	r3, r3, #29
 8001934:	075a      	lsls	r2, r3, #29
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800193a:	429a      	cmp	r2, r3
 800193c:	d001      	beq.n	8001942 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e000      	b.n	8001944 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	0018      	movs	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	b008      	add	sp, #32
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40021000 	.word	0x40021000

08001950 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e0e9      	b.n	8001b38 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001964:	4b76      	ldr	r3, [pc, #472]	; (8001b40 <HAL_RCC_ClockConfig+0x1f0>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2207      	movs	r2, #7
 800196a:	4013      	ands	r3, r2
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d91e      	bls.n	80019b0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001972:	4b73      	ldr	r3, [pc, #460]	; (8001b40 <HAL_RCC_ClockConfig+0x1f0>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2207      	movs	r2, #7
 8001978:	4393      	bics	r3, r2
 800197a:	0019      	movs	r1, r3
 800197c:	4b70      	ldr	r3, [pc, #448]	; (8001b40 <HAL_RCC_ClockConfig+0x1f0>)
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	430a      	orrs	r2, r1
 8001982:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001984:	f7fe feb6 	bl	80006f4 <HAL_GetTick>
 8001988:	0003      	movs	r3, r0
 800198a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800198c:	e009      	b.n	80019a2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800198e:	f7fe feb1 	bl	80006f4 <HAL_GetTick>
 8001992:	0002      	movs	r2, r0
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	4a6a      	ldr	r2, [pc, #424]	; (8001b44 <HAL_RCC_ClockConfig+0x1f4>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e0ca      	b.n	8001b38 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019a2:	4b67      	ldr	r3, [pc, #412]	; (8001b40 <HAL_RCC_ClockConfig+0x1f0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2207      	movs	r2, #7
 80019a8:	4013      	ands	r3, r2
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d1ee      	bne.n	800198e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2202      	movs	r2, #2
 80019b6:	4013      	ands	r3, r2
 80019b8:	d015      	beq.n	80019e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2204      	movs	r2, #4
 80019c0:	4013      	ands	r3, r2
 80019c2:	d006      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80019c4:	4b60      	ldr	r3, [pc, #384]	; (8001b48 <HAL_RCC_ClockConfig+0x1f8>)
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	4b5f      	ldr	r3, [pc, #380]	; (8001b48 <HAL_RCC_ClockConfig+0x1f8>)
 80019ca:	21e0      	movs	r1, #224	; 0xe0
 80019cc:	01c9      	lsls	r1, r1, #7
 80019ce:	430a      	orrs	r2, r1
 80019d0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d2:	4b5d      	ldr	r3, [pc, #372]	; (8001b48 <HAL_RCC_ClockConfig+0x1f8>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	4a5d      	ldr	r2, [pc, #372]	; (8001b4c <HAL_RCC_ClockConfig+0x1fc>)
 80019d8:	4013      	ands	r3, r2
 80019da:	0019      	movs	r1, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	4b59      	ldr	r3, [pc, #356]	; (8001b48 <HAL_RCC_ClockConfig+0x1f8>)
 80019e2:	430a      	orrs	r2, r1
 80019e4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2201      	movs	r2, #1
 80019ec:	4013      	ands	r3, r2
 80019ee:	d057      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d107      	bne.n	8001a08 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019f8:	4b53      	ldr	r3, [pc, #332]	; (8001b48 <HAL_RCC_ClockConfig+0x1f8>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	2380      	movs	r3, #128	; 0x80
 80019fe:	029b      	lsls	r3, r3, #10
 8001a00:	4013      	ands	r3, r2
 8001a02:	d12b      	bne.n	8001a5c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e097      	b.n	8001b38 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d107      	bne.n	8001a20 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a10:	4b4d      	ldr	r3, [pc, #308]	; (8001b48 <HAL_RCC_ClockConfig+0x1f8>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	2380      	movs	r3, #128	; 0x80
 8001a16:	049b      	lsls	r3, r3, #18
 8001a18:	4013      	ands	r3, r2
 8001a1a:	d11f      	bne.n	8001a5c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e08b      	b.n	8001b38 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d107      	bne.n	8001a38 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a28:	4b47      	ldr	r3, [pc, #284]	; (8001b48 <HAL_RCC_ClockConfig+0x1f8>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	2380      	movs	r3, #128	; 0x80
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	4013      	ands	r3, r2
 8001a32:	d113      	bne.n	8001a5c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e07f      	b.n	8001b38 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	d106      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a40:	4b41      	ldr	r3, [pc, #260]	; (8001b48 <HAL_RCC_ClockConfig+0x1f8>)
 8001a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a44:	2202      	movs	r2, #2
 8001a46:	4013      	ands	r3, r2
 8001a48:	d108      	bne.n	8001a5c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e074      	b.n	8001b38 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a4e:	4b3e      	ldr	r3, [pc, #248]	; (8001b48 <HAL_RCC_ClockConfig+0x1f8>)
 8001a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a52:	2202      	movs	r2, #2
 8001a54:	4013      	ands	r3, r2
 8001a56:	d101      	bne.n	8001a5c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e06d      	b.n	8001b38 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a5c:	4b3a      	ldr	r3, [pc, #232]	; (8001b48 <HAL_RCC_ClockConfig+0x1f8>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2207      	movs	r2, #7
 8001a62:	4393      	bics	r3, r2
 8001a64:	0019      	movs	r1, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	4b37      	ldr	r3, [pc, #220]	; (8001b48 <HAL_RCC_ClockConfig+0x1f8>)
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a70:	f7fe fe40 	bl	80006f4 <HAL_GetTick>
 8001a74:	0003      	movs	r3, r0
 8001a76:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a78:	e009      	b.n	8001a8e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a7a:	f7fe fe3b 	bl	80006f4 <HAL_GetTick>
 8001a7e:	0002      	movs	r2, r0
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	4a2f      	ldr	r2, [pc, #188]	; (8001b44 <HAL_RCC_ClockConfig+0x1f4>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e054      	b.n	8001b38 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a8e:	4b2e      	ldr	r3, [pc, #184]	; (8001b48 <HAL_RCC_ClockConfig+0x1f8>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	2238      	movs	r2, #56	; 0x38
 8001a94:	401a      	ands	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d1ec      	bne.n	8001a7a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001aa0:	4b27      	ldr	r3, [pc, #156]	; (8001b40 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2207      	movs	r2, #7
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d21e      	bcs.n	8001aec <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aae:	4b24      	ldr	r3, [pc, #144]	; (8001b40 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2207      	movs	r2, #7
 8001ab4:	4393      	bics	r3, r2
 8001ab6:	0019      	movs	r1, r3
 8001ab8:	4b21      	ldr	r3, [pc, #132]	; (8001b40 <HAL_RCC_ClockConfig+0x1f0>)
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ac0:	f7fe fe18 	bl	80006f4 <HAL_GetTick>
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ac8:	e009      	b.n	8001ade <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aca:	f7fe fe13 	bl	80006f4 <HAL_GetTick>
 8001ace:	0002      	movs	r2, r0
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	4a1b      	ldr	r2, [pc, #108]	; (8001b44 <HAL_RCC_ClockConfig+0x1f4>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e02c      	b.n	8001b38 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ade:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2207      	movs	r2, #7
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d1ee      	bne.n	8001aca <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2204      	movs	r2, #4
 8001af2:	4013      	ands	r3, r2
 8001af4:	d009      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001af6:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <HAL_RCC_ClockConfig+0x1f8>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	4a15      	ldr	r2, [pc, #84]	; (8001b50 <HAL_RCC_ClockConfig+0x200>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	0019      	movs	r1, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <HAL_RCC_ClockConfig+0x1f8>)
 8001b06:	430a      	orrs	r2, r1
 8001b08:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001b0a:	f000 f829 	bl	8001b60 <HAL_RCC_GetSysClockFreq>
 8001b0e:	0001      	movs	r1, r0
 8001b10:	4b0d      	ldr	r3, [pc, #52]	; (8001b48 <HAL_RCC_ClockConfig+0x1f8>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	0a1b      	lsrs	r3, r3, #8
 8001b16:	220f      	movs	r2, #15
 8001b18:	401a      	ands	r2, r3
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <HAL_RCC_ClockConfig+0x204>)
 8001b1c:	0092      	lsls	r2, r2, #2
 8001b1e:	58d3      	ldr	r3, [r2, r3]
 8001b20:	221f      	movs	r2, #31
 8001b22:	4013      	ands	r3, r2
 8001b24:	000a      	movs	r2, r1
 8001b26:	40da      	lsrs	r2, r3
 8001b28:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <HAL_RCC_ClockConfig+0x208>)
 8001b2a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <HAL_RCC_ClockConfig+0x20c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	0018      	movs	r0, r3
 8001b32:	f7fe fd83 	bl	800063c <HAL_InitTick>
 8001b36:	0003      	movs	r3, r0
}
 8001b38:	0018      	movs	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	b004      	add	sp, #16
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40022000 	.word	0x40022000
 8001b44:	00001388 	.word	0x00001388
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	fffff0ff 	.word	0xfffff0ff
 8001b50:	ffff8fff 	.word	0xffff8fff
 8001b54:	0800214c 	.word	0x0800214c
 8001b58:	20000000 	.word	0x20000000
 8001b5c:	20000004 	.word	0x20000004

08001b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b66:	4b3c      	ldr	r3, [pc, #240]	; (8001c58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2238      	movs	r2, #56	; 0x38
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d10f      	bne.n	8001b90 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001b70:	4b39      	ldr	r3, [pc, #228]	; (8001c58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	0adb      	lsrs	r3, r3, #11
 8001b76:	2207      	movs	r2, #7
 8001b78:	4013      	ands	r3, r2
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	409a      	lsls	r2, r3
 8001b7e:	0013      	movs	r3, r2
 8001b80:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001b82:	6839      	ldr	r1, [r7, #0]
 8001b84:	4835      	ldr	r0, [pc, #212]	; (8001c5c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b86:	f7fe fabd 	bl	8000104 <__udivsi3>
 8001b8a:	0003      	movs	r3, r0
 8001b8c:	613b      	str	r3, [r7, #16]
 8001b8e:	e05d      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b90:	4b31      	ldr	r3, [pc, #196]	; (8001c58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	2238      	movs	r2, #56	; 0x38
 8001b96:	4013      	ands	r3, r2
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d102      	bne.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b9c:	4b30      	ldr	r3, [pc, #192]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	e054      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ba2:	4b2d      	ldr	r3, [pc, #180]	; (8001c58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	2238      	movs	r2, #56	; 0x38
 8001ba8:	4013      	ands	r3, r2
 8001baa:	2b10      	cmp	r3, #16
 8001bac:	d138      	bne.n	8001c20 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001bae:	4b2a      	ldr	r3, [pc, #168]	; (8001c58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bb8:	4b27      	ldr	r3, [pc, #156]	; (8001c58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	091b      	lsrs	r3, r3, #4
 8001bbe:	2207      	movs	r2, #7
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2b03      	cmp	r3, #3
 8001bca:	d10d      	bne.n	8001be8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bcc:	68b9      	ldr	r1, [r7, #8]
 8001bce:	4824      	ldr	r0, [pc, #144]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x100>)
 8001bd0:	f7fe fa98 	bl	8000104 <__udivsi3>
 8001bd4:	0003      	movs	r3, r0
 8001bd6:	0019      	movs	r1, r3
 8001bd8:	4b1f      	ldr	r3, [pc, #124]	; (8001c58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	0a1b      	lsrs	r3, r3, #8
 8001bde:	227f      	movs	r2, #127	; 0x7f
 8001be0:	4013      	ands	r3, r2
 8001be2:	434b      	muls	r3, r1
 8001be4:	617b      	str	r3, [r7, #20]
        break;
 8001be6:	e00d      	b.n	8001c04 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001be8:	68b9      	ldr	r1, [r7, #8]
 8001bea:	481c      	ldr	r0, [pc, #112]	; (8001c5c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001bec:	f7fe fa8a 	bl	8000104 <__udivsi3>
 8001bf0:	0003      	movs	r3, r0
 8001bf2:	0019      	movs	r1, r3
 8001bf4:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	0a1b      	lsrs	r3, r3, #8
 8001bfa:	227f      	movs	r2, #127	; 0x7f
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	434b      	muls	r3, r1
 8001c00:	617b      	str	r3, [r7, #20]
        break;
 8001c02:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001c04:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	0f5b      	lsrs	r3, r3, #29
 8001c0a:	2207      	movs	r2, #7
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	3301      	adds	r3, #1
 8001c10:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	6978      	ldr	r0, [r7, #20]
 8001c16:	f7fe fa75 	bl	8000104 <__udivsi3>
 8001c1a:	0003      	movs	r3, r0
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	e015      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c20:	4b0d      	ldr	r3, [pc, #52]	; (8001c58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	2238      	movs	r2, #56	; 0x38
 8001c26:	4013      	ands	r3, r2
 8001c28:	2b20      	cmp	r3, #32
 8001c2a:	d103      	bne.n	8001c34 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001c2c:	2380      	movs	r3, #128	; 0x80
 8001c2e:	021b      	lsls	r3, r3, #8
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	e00b      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c34:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	2238      	movs	r2, #56	; 0x38
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	2b18      	cmp	r3, #24
 8001c3e:	d103      	bne.n	8001c48 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001c40:	23fa      	movs	r3, #250	; 0xfa
 8001c42:	01db      	lsls	r3, r3, #7
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	e001      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c4c:	693b      	ldr	r3, [r7, #16]
}
 8001c4e:	0018      	movs	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	b006      	add	sp, #24
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	46c0      	nop			; (mov r8, r8)
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	00f42400 	.word	0x00f42400
 8001c60:	007a1200 	.word	0x007a1200

08001c64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001c6c:	2313      	movs	r3, #19
 8001c6e:	18fb      	adds	r3, r7, r3
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c74:	2312      	movs	r3, #18
 8001c76:	18fb      	adds	r3, r7, r3
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	2380      	movs	r3, #128	; 0x80
 8001c82:	029b      	lsls	r3, r3, #10
 8001c84:	4013      	ands	r3, r2
 8001c86:	d100      	bne.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001c88:	e0ad      	b.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c8a:	2011      	movs	r0, #17
 8001c8c:	183b      	adds	r3, r7, r0
 8001c8e:	2200      	movs	r2, #0
 8001c90:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c92:	4b47      	ldr	r3, [pc, #284]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c96:	2380      	movs	r3, #128	; 0x80
 8001c98:	055b      	lsls	r3, r3, #21
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d110      	bne.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c9e:	4b44      	ldr	r3, [pc, #272]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ca0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ca2:	4b43      	ldr	r3, [pc, #268]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ca4:	2180      	movs	r1, #128	; 0x80
 8001ca6:	0549      	lsls	r1, r1, #21
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	63da      	str	r2, [r3, #60]	; 0x3c
 8001cac:	4b40      	ldr	r3, [pc, #256]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001cae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cb0:	2380      	movs	r3, #128	; 0x80
 8001cb2:	055b      	lsls	r3, r3, #21
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cba:	183b      	adds	r3, r7, r0
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cc0:	4b3c      	ldr	r3, [pc, #240]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4b3b      	ldr	r3, [pc, #236]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001cc6:	2180      	movs	r1, #128	; 0x80
 8001cc8:	0049      	lsls	r1, r1, #1
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001cce:	f7fe fd11 	bl	80006f4 <HAL_GetTick>
 8001cd2:	0003      	movs	r3, r0
 8001cd4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cd6:	e00b      	b.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd8:	f7fe fd0c 	bl	80006f4 <HAL_GetTick>
 8001cdc:	0002      	movs	r2, r0
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d904      	bls.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001ce6:	2313      	movs	r3, #19
 8001ce8:	18fb      	adds	r3, r7, r3
 8001cea:	2203      	movs	r2, #3
 8001cec:	701a      	strb	r2, [r3, #0]
        break;
 8001cee:	e005      	b.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cf0:	4b30      	ldr	r3, [pc, #192]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d0ed      	beq.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001cfc:	2313      	movs	r3, #19
 8001cfe:	18fb      	adds	r3, r7, r3
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d15e      	bne.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d06:	4b2a      	ldr	r3, [pc, #168]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d0a:	23c0      	movs	r3, #192	; 0xc0
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4013      	ands	r3, r2
 8001d10:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d019      	beq.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d014      	beq.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d22:	4b23      	ldr	r3, [pc, #140]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d26:	4a24      	ldr	r2, [pc, #144]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001d28:	4013      	ands	r3, r2
 8001d2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d2c:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d30:	4b1f      	ldr	r3, [pc, #124]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d32:	2180      	movs	r1, #128	; 0x80
 8001d34:	0249      	lsls	r1, r1, #9
 8001d36:	430a      	orrs	r2, r1
 8001d38:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d3a:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d3e:	4b1c      	ldr	r3, [pc, #112]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d40:	491e      	ldr	r1, [pc, #120]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001d42:	400a      	ands	r2, r1
 8001d44:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d46:	4b1a      	ldr	r3, [pc, #104]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	4013      	ands	r3, r2
 8001d52:	d016      	beq.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d54:	f7fe fcce 	bl	80006f4 <HAL_GetTick>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d5c:	e00c      	b.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5e:	f7fe fcc9 	bl	80006f4 <HAL_GetTick>
 8001d62:	0002      	movs	r2, r0
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	4a15      	ldr	r2, [pc, #84]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d904      	bls.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001d6e:	2313      	movs	r3, #19
 8001d70:	18fb      	adds	r3, r7, r3
 8001d72:	2203      	movs	r2, #3
 8001d74:	701a      	strb	r2, [r3, #0]
            break;
 8001d76:	e004      	b.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d78:	4b0d      	ldr	r3, [pc, #52]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d0ed      	beq.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001d82:	2313      	movs	r3, #19
 8001d84:	18fb      	adds	r3, r7, r3
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10a      	bne.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d8c:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d90:	4a09      	ldr	r2, [pc, #36]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	0019      	movs	r1, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d9a:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001da0:	e016      	b.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001da2:	2312      	movs	r3, #18
 8001da4:	18fb      	adds	r3, r7, r3
 8001da6:	2213      	movs	r2, #19
 8001da8:	18ba      	adds	r2, r7, r2
 8001daa:	7812      	ldrb	r2, [r2, #0]
 8001dac:	701a      	strb	r2, [r3, #0]
 8001dae:	e00f      	b.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40007000 	.word	0x40007000
 8001db8:	fffffcff 	.word	0xfffffcff
 8001dbc:	fffeffff 	.word	0xfffeffff
 8001dc0:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dc4:	2312      	movs	r3, #18
 8001dc6:	18fb      	adds	r3, r7, r3
 8001dc8:	2213      	movs	r2, #19
 8001dca:	18ba      	adds	r2, r7, r2
 8001dcc:	7812      	ldrb	r2, [r2, #0]
 8001dce:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001dd0:	2311      	movs	r3, #17
 8001dd2:	18fb      	adds	r3, r7, r3
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d105      	bne.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dda:	4bb6      	ldr	r3, [pc, #728]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ddc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dde:	4bb5      	ldr	r3, [pc, #724]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001de0:	49b5      	ldr	r1, [pc, #724]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001de2:	400a      	ands	r2, r1
 8001de4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2201      	movs	r2, #1
 8001dec:	4013      	ands	r3, r2
 8001dee:	d009      	beq.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001df0:	4bb0      	ldr	r3, [pc, #704]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df4:	2203      	movs	r2, #3
 8001df6:	4393      	bics	r3, r2
 8001df8:	0019      	movs	r1, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	4bad      	ldr	r3, [pc, #692]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e00:	430a      	orrs	r2, r1
 8001e02:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2202      	movs	r2, #2
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	d009      	beq.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e0e:	4ba9      	ldr	r3, [pc, #676]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e12:	220c      	movs	r2, #12
 8001e14:	4393      	bics	r3, r2
 8001e16:	0019      	movs	r1, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	4ba5      	ldr	r3, [pc, #660]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2204      	movs	r2, #4
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d009      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e2c:	4ba1      	ldr	r3, [pc, #644]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e30:	2230      	movs	r2, #48	; 0x30
 8001e32:	4393      	bics	r3, r2
 8001e34:	0019      	movs	r1, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	4b9e      	ldr	r3, [pc, #632]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2210      	movs	r2, #16
 8001e46:	4013      	ands	r3, r2
 8001e48:	d009      	beq.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e4a:	4b9a      	ldr	r3, [pc, #616]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4e:	4a9b      	ldr	r2, [pc, #620]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001e50:	4013      	ands	r3, r2
 8001e52:	0019      	movs	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691a      	ldr	r2, [r3, #16]
 8001e58:	4b96      	ldr	r3, [pc, #600]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	2380      	movs	r3, #128	; 0x80
 8001e64:	015b      	lsls	r3, r3, #5
 8001e66:	4013      	ands	r3, r2
 8001e68:	d009      	beq.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8001e6a:	4b92      	ldr	r3, [pc, #584]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6e:	4a94      	ldr	r2, [pc, #592]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	0019      	movs	r1, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	695a      	ldr	r2, [r3, #20]
 8001e78:	4b8e      	ldr	r3, [pc, #568]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	2380      	movs	r3, #128	; 0x80
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4013      	ands	r3, r2
 8001e88:	d009      	beq.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e8a:	4b8a      	ldr	r3, [pc, #552]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8e:	4a8d      	ldr	r2, [pc, #564]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8001e90:	4013      	ands	r3, r2
 8001e92:	0019      	movs	r1, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e98:	4b86      	ldr	r3, [pc, #536]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	2380      	movs	r3, #128	; 0x80
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d009      	beq.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001eaa:	4b82      	ldr	r3, [pc, #520]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eae:	4a86      	ldr	r2, [pc, #536]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	0019      	movs	r1, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eb8:	4b7e      	ldr	r3, [pc, #504]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d009      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ec8:	4b7a      	ldr	r3, [pc, #488]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ecc:	4a7f      	ldr	r2, [pc, #508]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001ece:	4013      	ands	r3, r2
 8001ed0:	0019      	movs	r1, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	699a      	ldr	r2, [r3, #24]
 8001ed6:	4b77      	ldr	r3, [pc, #476]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2240      	movs	r2, #64	; 0x40
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d009      	beq.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ee6:	4b73      	ldr	r3, [pc, #460]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eea:	4a79      	ldr	r2, [pc, #484]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8001eec:	4013      	ands	r3, r2
 8001eee:	0019      	movs	r1, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69da      	ldr	r2, [r3, #28]
 8001ef4:	4b6f      	ldr	r3, [pc, #444]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	2380      	movs	r3, #128	; 0x80
 8001f00:	01db      	lsls	r3, r3, #7
 8001f02:	4013      	ands	r3, r2
 8001f04:	d015      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f06:	4b6b      	ldr	r3, [pc, #428]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	0899      	lsrs	r1, r3, #2
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f12:	4b68      	ldr	r3, [pc, #416]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f14:	430a      	orrs	r2, r1
 8001f16:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f1c:	2380      	movs	r3, #128	; 0x80
 8001f1e:	05db      	lsls	r3, r3, #23
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d106      	bne.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001f24:	4b63      	ldr	r3, [pc, #396]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f26:	68da      	ldr	r2, [r3, #12]
 8001f28:	4b62      	ldr	r3, [pc, #392]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f2a:	2180      	movs	r1, #128	; 0x80
 8001f2c:	0249      	lsls	r1, r1, #9
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	2380      	movs	r3, #128	; 0x80
 8001f38:	031b      	lsls	r3, r3, #12
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d009      	beq.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001f3e:	4b5d      	ldr	r3, [pc, #372]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f42:	2240      	movs	r2, #64	; 0x40
 8001f44:	4393      	bics	r3, r2
 8001f46:	0019      	movs	r1, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f4c:	4b59      	ldr	r3, [pc, #356]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	2380      	movs	r3, #128	; 0x80
 8001f58:	039b      	lsls	r3, r3, #14
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	d016      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001f5e:	4b55      	ldr	r3, [pc, #340]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f62:	4a5c      	ldr	r2, [pc, #368]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	0019      	movs	r1, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f6c:	4b51      	ldr	r3, [pc, #324]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f76:	2380      	movs	r3, #128	; 0x80
 8001f78:	03db      	lsls	r3, r3, #15
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d106      	bne.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001f7e:	4b4d      	ldr	r3, [pc, #308]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	4b4c      	ldr	r3, [pc, #304]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f84:	2180      	movs	r1, #128	; 0x80
 8001f86:	0449      	lsls	r1, r1, #17
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	2380      	movs	r3, #128	; 0x80
 8001f92:	03db      	lsls	r3, r3, #15
 8001f94:	4013      	ands	r3, r2
 8001f96:	d016      	beq.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001f98:	4b46      	ldr	r3, [pc, #280]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f9c:	4a4e      	ldr	r2, [pc, #312]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	0019      	movs	r1, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fa6:	4b43      	ldr	r3, [pc, #268]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	045b      	lsls	r3, r3, #17
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d106      	bne.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001fb8:	4b3e      	ldr	r3, [pc, #248]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fba:	68da      	ldr	r2, [r3, #12]
 8001fbc:	4b3d      	ldr	r3, [pc, #244]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fbe:	2180      	movs	r1, #128	; 0x80
 8001fc0:	0449      	lsls	r1, r1, #17
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	2380      	movs	r3, #128	; 0x80
 8001fcc:	011b      	lsls	r3, r3, #4
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d014      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001fd2:	4b38      	ldr	r3, [pc, #224]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd6:	2203      	movs	r2, #3
 8001fd8:	4393      	bics	r3, r2
 8001fda:	0019      	movs	r1, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a1a      	ldr	r2, [r3, #32]
 8001fe0:	4b34      	ldr	r3, [pc, #208]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d106      	bne.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001fee:	4b31      	ldr	r3, [pc, #196]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ff0:	68da      	ldr	r2, [r3, #12]
 8001ff2:	4b30      	ldr	r3, [pc, #192]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ff4:	2180      	movs	r1, #128	; 0x80
 8001ff6:	0249      	lsls	r1, r1, #9
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	2380      	movs	r3, #128	; 0x80
 8002002:	019b      	lsls	r3, r3, #6
 8002004:	4013      	ands	r3, r2
 8002006:	d014      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002008:	4b2a      	ldr	r3, [pc, #168]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800200a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200c:	220c      	movs	r2, #12
 800200e:	4393      	bics	r3, r2
 8002010:	0019      	movs	r1, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002016:	4b27      	ldr	r3, [pc, #156]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002018:	430a      	orrs	r2, r1
 800201a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002020:	2b04      	cmp	r3, #4
 8002022:	d106      	bne.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002024:	4b23      	ldr	r3, [pc, #140]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002026:	68da      	ldr	r2, [r3, #12]
 8002028:	4b22      	ldr	r3, [pc, #136]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800202a:	2180      	movs	r1, #128	; 0x80
 800202c:	0249      	lsls	r1, r1, #9
 800202e:	430a      	orrs	r2, r1
 8002030:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	2380      	movs	r3, #128	; 0x80
 8002038:	045b      	lsls	r3, r3, #17
 800203a:	4013      	ands	r3, r2
 800203c:	d016      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800203e:	4b1d      	ldr	r3, [pc, #116]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002042:	4a22      	ldr	r2, [pc, #136]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002044:	4013      	ands	r3, r2
 8002046:	0019      	movs	r1, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800204c:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800204e:	430a      	orrs	r2, r1
 8002050:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002056:	2380      	movs	r3, #128	; 0x80
 8002058:	019b      	lsls	r3, r3, #6
 800205a:	429a      	cmp	r2, r3
 800205c:	d106      	bne.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800205e:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002060:	68da      	ldr	r2, [r3, #12]
 8002062:	4b14      	ldr	r3, [pc, #80]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002064:	2180      	movs	r1, #128	; 0x80
 8002066:	0449      	lsls	r1, r1, #17
 8002068:	430a      	orrs	r2, r1
 800206a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	2380      	movs	r3, #128	; 0x80
 8002072:	049b      	lsls	r3, r3, #18
 8002074:	4013      	ands	r3, r2
 8002076:	d016      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002078:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800207a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207c:	4a10      	ldr	r2, [pc, #64]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800207e:	4013      	ands	r3, r2
 8002080:	0019      	movs	r1, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002086:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002088:	430a      	orrs	r2, r1
 800208a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002090:	2380      	movs	r3, #128	; 0x80
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	429a      	cmp	r2, r3
 8002096:	d106      	bne.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002098:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800209e:	2180      	movs	r1, #128	; 0x80
 80020a0:	0449      	lsls	r1, r1, #17
 80020a2:	430a      	orrs	r2, r1
 80020a4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80020a6:	2312      	movs	r3, #18
 80020a8:	18fb      	adds	r3, r7, r3
 80020aa:	781b      	ldrb	r3, [r3, #0]
}
 80020ac:	0018      	movs	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b006      	add	sp, #24
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40021000 	.word	0x40021000
 80020b8:	efffffff 	.word	0xefffffff
 80020bc:	fffff3ff 	.word	0xfffff3ff
 80020c0:	fffffcff 	.word	0xfffffcff
 80020c4:	fff3ffff 	.word	0xfff3ffff
 80020c8:	ffcfffff 	.word	0xffcfffff
 80020cc:	ffffcfff 	.word	0xffffcfff
 80020d0:	ffff3fff 	.word	0xffff3fff
 80020d4:	ffbfffff 	.word	0xffbfffff
 80020d8:	feffffff 	.word	0xfeffffff

080020dc <__libc_init_array>:
 80020dc:	b570      	push	{r4, r5, r6, lr}
 80020de:	2600      	movs	r6, #0
 80020e0:	4d0c      	ldr	r5, [pc, #48]	; (8002114 <__libc_init_array+0x38>)
 80020e2:	4c0d      	ldr	r4, [pc, #52]	; (8002118 <__libc_init_array+0x3c>)
 80020e4:	1b64      	subs	r4, r4, r5
 80020e6:	10a4      	asrs	r4, r4, #2
 80020e8:	42a6      	cmp	r6, r4
 80020ea:	d109      	bne.n	8002100 <__libc_init_array+0x24>
 80020ec:	2600      	movs	r6, #0
 80020ee:	f000 f821 	bl	8002134 <_init>
 80020f2:	4d0a      	ldr	r5, [pc, #40]	; (800211c <__libc_init_array+0x40>)
 80020f4:	4c0a      	ldr	r4, [pc, #40]	; (8002120 <__libc_init_array+0x44>)
 80020f6:	1b64      	subs	r4, r4, r5
 80020f8:	10a4      	asrs	r4, r4, #2
 80020fa:	42a6      	cmp	r6, r4
 80020fc:	d105      	bne.n	800210a <__libc_init_array+0x2e>
 80020fe:	bd70      	pop	{r4, r5, r6, pc}
 8002100:	00b3      	lsls	r3, r6, #2
 8002102:	58eb      	ldr	r3, [r5, r3]
 8002104:	4798      	blx	r3
 8002106:	3601      	adds	r6, #1
 8002108:	e7ee      	b.n	80020e8 <__libc_init_array+0xc>
 800210a:	00b3      	lsls	r3, r6, #2
 800210c:	58eb      	ldr	r3, [r5, r3]
 800210e:	4798      	blx	r3
 8002110:	3601      	adds	r6, #1
 8002112:	e7f2      	b.n	80020fa <__libc_init_array+0x1e>
 8002114:	0800219c 	.word	0x0800219c
 8002118:	0800219c 	.word	0x0800219c
 800211c:	0800219c 	.word	0x0800219c
 8002120:	080021a0 	.word	0x080021a0

08002124 <memset>:
 8002124:	0003      	movs	r3, r0
 8002126:	1882      	adds	r2, r0, r2
 8002128:	4293      	cmp	r3, r2
 800212a:	d100      	bne.n	800212e <memset+0xa>
 800212c:	4770      	bx	lr
 800212e:	7019      	strb	r1, [r3, #0]
 8002130:	3301      	adds	r3, #1
 8002132:	e7f9      	b.n	8002128 <memset+0x4>

08002134 <_init>:
 8002134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800213a:	bc08      	pop	{r3}
 800213c:	469e      	mov	lr, r3
 800213e:	4770      	bx	lr

08002140 <_fini>:
 8002140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002142:	46c0      	nop			; (mov r8, r8)
 8002144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002146:	bc08      	pop	{r3}
 8002148:	469e      	mov	lr, r3
 800214a:	4770      	bx	lr
